/**
 * This file is automatically generated by the `@indirectus/cli` package.
 * Follow the package's instruction to update this file with the latest schema.
 */

import type * as Directus from "@directus/sdk";

import * as DirectusSDK from "@directus/sdk";

type DirectusSDK = typeof DirectusSDK;

/*
declare module "@directus/sdk" {
  type DirectusAccess<Schema = any> = Directus.MergeCoreCollection<
    Schema,
    "directus_access", {
      id: string;
    }
  >;

  type DirectusPolicies<Schema = any> = Directus.MergeCoreCollection<
    Schema,
    "directus_policies", {
      id: string;
    }
  >;
}
*/

export namespace Types {
  // Internal
  export type Nullable<T> = T | null;
  export type Optional<T> = Nullable<T>;
  export type UnknownType<T> = T | unknown;
  export type PrimaryKey<T> = T;

  // Numbers
  export type BigInteger = number;
  export type Decimal = number;
  export type Float = number;
  export type Integer = number;
  export type Number = number;

  // Buffers
  export type Binary = string;
  export type String = string;
  export type Text = string;

  // Date & Time
  export type Date = string | globalThis.Date;
  export type DateTime = string | globalThis.Date;

  // Geometry
  export namespace Geometry {
    export type LineString = any;
    export type MultiLineString = any;
    export type MultiPoint = any;
    export type MultiPolygon = any;
    export type Point = any;
    export type Polygon = any;
  }

  // Complex
  export type JSON = any;
  export type JSONSchema = any;

  // Others
  export type UUID = string;
  export type Boolean = boolean;
  export type Enum = string;
}

/**
 * All collection types.
 */
export namespace Collections {
  /**
   * The resolved directus activity collection type.
   *
   */
  export type DirectusActivity = Directus.DirectusActivity<System>;

  /**
   * The resolved directus collections collection type.
   *
   */
  export type DirectusCollection = Directus.DirectusCollection<System>;

  /**
   * The resolved directus fields collection type.
   *
   */
  export type DirectusField = Directus.DirectusField<System>;

  /**
   * The resolved directus files collection type.
   *
   */
  export type DirectusFile = Directus.DirectusFile<System>;

  /**
   * The resolved directus folders collection type.
   *
   */
  export type DirectusFolder = Directus.DirectusFolder<System>;

  /**
   * The resolved directus permissions collection type.
   *
   */
  export type DirectusPermission = Directus.DirectusPermission<System>;

  /**
   * The resolved directus presets collection type.
   *
   */
  export type DirectusPreset = Directus.DirectusPreset<System>;

  /**
   * The resolved directus relations collection type.
   *
   */
  export type DirectusRelation = Directus.DirectusRelation<System>;

  /**
   * The resolved directus revisions collection type.
   *
   */
  export type DirectusRevision = Directus.DirectusRevision<System>;

  /**
   * The resolved directus roles collection type.
   *
   */
  export type DirectusRole = Directus.DirectusRole<System>;

  /**
   * The resolved directus settings collection type.
   *
   */
  export type DirectusSettings = Directus.DirectusSettings<System>;

  /**
   * The resolved directus users collection type.
   *
   */
  export type DirectusUser = Directus.DirectusUser<System>;

  /**
   * The resolved directus webhooks collection type.
   *
   */
  export type DirectusWebhook = Directus.DirectusWebhook<System>;

  /**
   * The resolved directus dashboards collection type.
   *
   */
  export type DirectusDashboard = Directus.DirectusDashboard<System>;

  /**
   * The resolved directus panels collection type.
   *
   */
  export type DirectusPanel = Directus.DirectusPanel<System>;

  /**
   * The resolved directus notifications collection type.
   *
   */
  export type DirectusNotification = Directus.DirectusNotification<System>;

  /**
   * The resolved directus shares collection type.
   *
   */
  export type DirectusShare = Directus.DirectusShare<System>;

  /**
   * The resolved directus flows collection type.
   *
   */
  export type DirectusFlow = Directus.DirectusFlow<System>;

  /**
   * The resolved directus operations collection type.
   *
   */
  export type DirectusOperation = Directus.DirectusOperation<System>;

  /**
   * The resolved directus translations collection type.
   *
   */
  export type DirectusTranslation = Directus.DirectusTranslation<System>;

  /**
   * The resolved directus versions collection type.
   *
   */
  export type DirectusVersion = Directus.DirectusVersion<System>;

  /**
   * The resolved directus extensions collection type.
   *
   */
  export type DirectusExtension = Directus.DirectusExtension<System>;

  /**
   * The button collection.
   */
  export interface Button {
    id: Types.PrimaryKey<Types.UUID>;
    label: Types.String;
    variant:
      | "link"
      | "ghost"
      | "secondary"
      | "outline"
      | "default"
      | Types.String;
    size: Types.Optional<"lg" | "small" | "default" | Types.String>;
    type: Types.String;
    url: Types.Optional<Types.String>;
    new_tab: Types.Optional<Types.Boolean>;
    page: Types.Optional<Types.UUID | Collections.Pages>;
  }

  /**
   * The contact forms collection.
   */
  export interface ContactForms {
    id: Types.PrimaryKey<Types.BigInteger>;
    date_created: Types.Optional<Types.DateTime>;
    sort: Types.Optional<Types.Integer>;
    name: Types.Optional<Types.String>;
    email: Types.Optional<Types.String>;
    message: Types.Optional<Types.String>;
  }

  /**
   * The gallery collection.
   */
  export interface Gallery {
    id: Types.PrimaryKey<Types.UUID>;
    type: Types.Optional<Types.String>;
    images: Collections.GalleryFiles[];
  }

  /**
   * The gallery files collection.
   */
  export interface GalleryFiles {
    id: Types.PrimaryKey<Types.Integer>;
    gallery_id: Types.Optional<Types.UUID | Collections.Gallery>;
    directus_files_id: Types.Optional<Types.UUID | Collections.DirectusFile>;
  }

  /**
   * The homepage collection.
   */
  export interface Homepage {
    id: Types.PrimaryKey<Types.UUID>;
    user_created: Types.Optional<Types.UUID | Collections.DirectusUser>;
    date_created: Types.Optional<Types.DateTime>;
    user_updated: Types.Optional<Types.UUID | Collections.DirectusUser>;
    date_updated: Types.Optional<Types.DateTime>;
    img: Types.Optional<Types.UUID | Collections.DirectusFile>;
  }

  /**
   * The image collection.
   */
  export interface Image {
    id: Types.PrimaryKey<Types.UUID>;
    sort: Types.Optional<Types.Integer>;
    image: Types.Optional<Types.UUID | Collections.DirectusFile>;
    show_caption: Types.Optional<Types.Boolean>;
  }

  /**
   * The menu items collection.
   */
  export interface MenuItems {
    id: Types.PrimaryKey<Types.UUID>;
    menu: Types.Optional<Types.String | Collections.Menus>;
    sort: Types.Optional<Types.Integer>;
    label: Types.Optional<Types.String>;
    type: Types.Optional<Types.String>;
    page: Types.Optional<Types.UUID | Collections.Pages>;
    children: Collections.MenuItems[];
    url: Types.Optional<Types.String>;
    open_in_new_tab: Types.Optional<Types.Boolean>;
    parent: Types.Optional<Types.UUID | Collections.MenuItems>;
  }

  /**
   * The menus collection.
   */
  export interface Menus {
    title: Types.PrimaryKey<Types.String>;
    items: Collections.MenuItems[];
    sort: Types.Optional<Types.Integer>;
  }

  /**
   * The pages collection.
   */
  export interface Pages {
    id: Types.PrimaryKey<Types.UUID>;
    sort: Types.Optional<Types.Integer>;
    user_created: Types.Optional<Types.UUID | Collections.DirectusUser>;
    date_created: Types.Optional<Types.DateTime>;
    user_updated: Types.Optional<Types.UUID | Collections.DirectusUser>;
    date_updated: Types.Optional<Types.DateTime>;
    status: "archived" | "draft" | "published" | Types.String;
    parent: Types.Optional<Types.UUID | Collections.Pages>;
    title: Types.String;
    editor: Types.Optional<Types.JSON | Types.JSON>;
    editor_nodes: Collections.PagesEditorNodes[];
    seo_detail: Types.Optional<Types.Integer | Collections.SeoDetail>;
    permalink: Types.Optional<Types.String>;
  }

  /**
   * The pages editor nodes collection.
   */
  export interface PagesEditorNodes {
    id: Types.PrimaryKey<Types.UUID>;
    pages_id: Types.Optional<Types.UUID | Collections.Pages>;
    item: Types.Optional<Types.String | Collections.Section>;
    collection: Types.Optional<Types.String>;
  }

  /**
   * The quote collection.
   */
  export interface Quote {
    id: Types.PrimaryKey<Types.UUID>;
    text: Types.Optional<Types.String>;
    author: Types.Optional<Types.String>;
  }

  /**
   * The section collection.
   */
  export interface Section {
    id: Types.PrimaryKey<Types.UUID>;
    width: Types.Optional<"full-width" | "default" | Types.String>;
    color: "muted" | "secondary" | "primary" | "none" | Types.String;
    editor: Types.Optional<Types.JSON | Types.JSON>;
    editor_nodes: Collections.SectionEditorNodes[];
  }

  /**
   * The section editor nodes collection.
   */
  export interface SectionEditorNodes {
    id: Types.PrimaryKey<Types.UUID>;
    section_id: Types.Optional<Types.UUID | Collections.Section>;
    item: Types.Optional<
      | Types.String
      | Collections.Image
      | Collections.Gallery
      | Collections.Quote
      | Collections.Button
    >;
    collection: Types.Optional<Types.String>;
  }

  /**
   * The seo advanced setting collection.
   */
  export interface SeoAdvancedSetting {
    collection: Types.PrimaryKey<Types.String>;
    enabled: Types.Optional<Types.Boolean>;
    is_static: Types.Optional<Types.Boolean>;
    translations: Types.UnknownType<{
      schema: {
        raw: {
          collection: "seo_advanced_setting";
          field: "translations";
          type: "alias";
          schema: null;
          meta: {
            id: 129;
            collection: "seo_advanced_setting";
            field: "translations";
            special: ["translations"];
            interface: "translations";
            options: null;
            display: null;
            display_options: null;
            readonly: false;
            hidden: false;
            sort: 4;
            width: "full";
            translations: null;
            note: null;
            conditions: null;
            required: false;
            group: null;
            validation: null;
            validation_message: null;
          };
        };
        raw_relation: null;
      };
      meta: {
        id: 129;
        collection: "seo_advanced_setting";
        field: "translations";
        special: ["translations"];
        interface: "translations";
        options: null;
        display: null;
        display_options: null;
        readonly: false;
        hidden: false;
        sort: 4;
        width: "full";
        translations: null;
        note: null;
        conditions: null;
        required: false;
        group: null;
        validation: null;
        validation_message: null;
      };
    }>;
  }

  /**
   * The seo detail collection.
   */
  export interface SeoDetail {
    id: Types.PrimaryKey<Types.Integer>;
    meta_title: Types.Optional<Types.String>;
    meta_description: Types.Optional<Types.String>;
    meta_keywords: Types.Optional<Types.String>;
    schema_type: Types.Optional<
      | "software"
      | "service"
      | "person"
      | "video"
      | "restaurant"
      | "recipe"
      | "product"
      | "music"
      | "jobposting"
      | "event"
      | "course"
      | "book"
      | "article"
      | ""
      | Types.String
    >;
    meta_robots: Types.Optional<Types.JSON | Types.JSON>;
    meta_social: Types.Optional<Types.String>;
    image_share: Types.Optional<Types.String>;
    facebook_image: Types.Optional<Types.UUID>;
    twitter_image: Types.Optional<Types.UUID>;
  }

  /**
   * The seo redirection collection.
   */
  export interface SeoRedirection {
    id: Types.PrimaryKey<Types.Integer>;
    date_created: Types.Optional<Types.DateTime>;
    date_updated: Types.Optional<Types.DateTime>;
    status: Types.Optional<Types.String>;
    old_url: Types.Optional<Types.String>;
    new_url: Types.Optional<Types.String>;
  }

  /**
   * The seo setting collection.
   */
  export interface SeoSetting {
    key: Types.PrimaryKey<Types.String>;
    value: Types.Optional<Types.JSON | Types.JSON>;
  }

  /**
   * The directus sync id map collection.
   */
  export interface DirectusSyncIdMap {
    id: Types.PrimaryKey<Types.Integer>;
    table: Types.String;
    sync_id: Types.String;
    local_id: Types.String;
    created_at: Types.Optional<Types.DateTime>;
  }
}

/**
 * System schema extensions.
 */

export interface System {
  /**
   * The definition for the directus activity system collection.
   *
   */
  directus_activity: {}[];

  /**
   * The definition for the directus collections system collection.
   *
   */
  directus_collections: {}[];

  /**
   * The definition for the directus fields system collection.
   *
   */
  directus_fields: {}[];

  /**
   * The definition for the directus files system collection.
   *
   */
  directus_files: {
    thumbhash: Types.Optional<Types.String>;
  }[];

  /**
   * The definition for the directus folders system collection.
   *
   */
  directus_folders: {}[];

  /**
   * The definition for the directus permissions system collection.
   *
   */
  directus_permissions: {}[];

  /**
   * The definition for the directus presets system collection.
   *
   */
  directus_presets: {}[];

  /**
   * The definition for the directus relations system collection.
   *
   */
  directus_relations: {}[];

  /**
   * The definition for the directus revisions system collection.
   *
   */
  directus_revisions: {}[];

  /**
   * The definition for the directus roles system collection.
   *
   */
  directus_roles: {}[];

  /**
   * The definition for the directus settings system collection.
   *
   */
  directus_settings: {
    flow_manager_categories: Types.Optional<Types.JSON | Types.JSON>;
  };

  /**
   * The definition for the directus users system collection.
   *
   */
  directus_users: {}[];

  /**
   * The definition for the directus webhooks system collection.
   *
   */
  directus_webhooks: {}[];

  /**
   * The definition for the directus dashboards system collection.
   *
   */
  directus_dashboards: {}[];

  /**
   * The definition for the directus panels system collection.
   *
   */
  directus_panels: {}[];

  /**
   * The definition for the directus notifications system collection.
   *
   */
  directus_notifications: {}[];

  /**
   * The definition for the directus shares system collection.
   *
   */
  directus_shares: {}[];

  /**
   * The definition for the directus flows system collection.
   *
   */
  directus_flows: {
    flow_manager_category: Types.Optional<Types.String>;
    flow_manager_order: Types.Optional<Types.Integer>;
    flow_manager_last_run_at: Types.Optional<Types.DateTime>;
    flow_manager_run_counter: Types.Optional<Types.Integer>;
  }[];

  /**
   * The definition for the directus operations system collection.
   *
   */
  directus_operations: {}[];

  /**
   * The definition for the directus translations system collection.
   *
   */
  directus_translations: {}[];

  /**
   * The definition for the directus versions system collection.
   *
   */
  directus_versions: {}[];

  /**
   * The definition for the directus extensions system collection.
   *
   */
  directus_extensions: {}[];
}

/**
 * Schema definition.
 */
export interface Schema extends System {
  /**
   * The button collection.
   */
  button: Collections.Button[];

  /**
   * The contact forms collection.
   */
  contact_forms: Collections.ContactForms[];

  /**
   * The gallery collection.
   */
  gallery: Collections.Gallery[];

  /**
   * The gallery files collection.
   */
  gallery_files: Collections.GalleryFiles[];

  /**
   * The homepage collection.
   */
  homepage: Collections.Homepage;

  /**
   * The image collection.
   */
  image: Collections.Image[];

  /**
   * The menu items collection.
   */
  menu_items: Collections.MenuItems[];

  /**
   * The menus collection.
   */
  menus: Collections.Menus[];

  /**
   * The pages collection.
   */
  pages: Collections.Pages[];

  /**
   * The pages editor nodes collection.
   */
  pages_editor_nodes: Collections.PagesEditorNodes[];

  /**
   * The quote collection.
   */
  quote: Collections.Quote[];

  /**
   * The section collection.
   */
  section: Collections.Section[];

  /**
   * The section editor nodes collection.
   */
  section_editor_nodes: Collections.SectionEditorNodes[];

  /**
   * The seo advanced setting collection.
   */
  seo_advanced_setting: Collections.SeoAdvancedSetting[];

  /**
   * The seo detail collection.
   */
  seo_detail: Collections.SeoDetail[];

  /**
   * The seo redirection collection.
   */
  seo_redirection: Collections.SeoRedirection[];

  /**
   * The seo setting collection.
   */
  seo_setting: Collections.SeoSetting[];

  /**
   * The directus sync id map collection.
   */
  directus_sync_id_map: Collections.DirectusSyncIdMap[];
}

export interface TypedCollectionItemsWrapper<Collection extends object> {
  /**
   * Creates many items in the collection.
   */
  create<const Query extends DirectusSDK.Query<Schema, Collection>>(
    items: Partial<Collection>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collection, Query["fields"]>[]
  >;

  /**
   * Read many items from the collection.
   */
  query<const Query extends DirectusSDK.Query<Schema, Collection>>(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collection, Query["fields"]>[]
  >;

  /**
   * Read the first item from the collection matching the query.
   */
  find<const Query extends DirectusSDK.Query<Schema, Collection>>(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collection, Query["fields"]>
    | undefined
  >;

  /**
   * Update many items in the collection.
   */
  update<const Query extends DirectusSDK.Query<Schema, Collection[]>>(
    keys: string[] | number[],
    patch: Partial<Collection>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collection, Query["fields"]>[]
  >;

  /**
   * Remove many items in the collection.
   */
  remove<const Query extends DirectusSDK.Query<Schema, Collection>>(
    keys: string[] | number[],
  ): Promise<void>;
}

export interface TypedCollectionItemWrapper<Collection extends object> {
  /**
   * Create a single item in the collection.
   */
  create<const Query extends DirectusSDK.Query<Schema, Collection>>(
    item: Partial<Collection>,
    query?: Query,
  ): Promise<DirectusSDK.ApplyQueryFields<Schema, Collection, Query["fields"]>>;

  /**
   * Read a single item from the collection.
   */
  get<const Query extends DirectusSDK.Query<Schema, Collection>>(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collection, Query["fields"]>
    | undefined
  >;

  /**
   * Update a single item from the collection.
   */
  update<const Query extends DirectusSDK.Query<Schema, Collection>>(
    key: string | number,
    patch: Partial<Collection>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collection, Query["fields"]>
    | undefined
  >;

  /**
   * Remove many items in the collection.
   */
  remove<const Query extends DirectusSDK.Query<Schema, Collection>>(
    key: string | number,
  ): Promise<void>;
}

/**
 * Helper functions
 */

/**
 * Create many button items.
 */
export function createButtonItems<
  const Query extends Directus.Query<Schema, Collections.Button[]>,
>(items: Partial<Collections.Button>[], query?: Query) {
  return DirectusSDK.createItems<Schema, "button", Query>(
    "button",
    items,
    query,
  );
}

/**
 * Create a single button item.
 */
export function createButtonItem<
  const Query extends DirectusSDK.Query<Schema, Collections.Button[]>, // Is this a mistake? Why []?
>(item: Partial<Collections.Button>, query?: Query) {
  return DirectusSDK.createItem<Schema, "button", Query>("button", item, query);
}

/**
 * Read many button items.
 */
export function readButtonItems<
  const Query extends Directus.Query<Schema, Collections.Button>,
>(query?: Query) {
  return DirectusSDK.readItems<Schema, "button", Query>("button", query);
}

/**
 * Read many button items.
 */
export const listButton = readButtonItems;

/**
 * Gets a single known button item by id.
 */
export function readButtonItem<
  const Query extends Directus.Query<Schema, Collections.Button>,
>(key: string | number, query?: Query) {
  return DirectusSDK.readItem<Schema, "button", Query>("button", key, query);
}

/**
 * Gets a single known button item by id.
 */
export const readButton = readButtonItem;

/**
 * Read many button items.
 */
export function updateButtonItems<
  const Query extends Directus.Query<Schema, Collections.Button[]>,
>(
  keys: string[] | number[],
  patch: Partial<Collections.Button>,
  query?: Query,
) {
  return DirectusSDK.updateItems<Schema, "button", Query>(
    "button",
    keys,
    patch,
    query,
  );
}

/**
 * Gets a single known button item by id.
 */
export function updateButtonItem<
  const Query extends Directus.Query<Schema, Collections.Button[]>,
>(key: string | number, patch: Partial<Collections.Button>, query?: Query) {
  return DirectusSDK.updateItem<Schema, "button", Query>(
    "button",
    key,
    patch,
    query,
  );
}

/**
 * Deletes many button items.
 */
export function deleteButtonItems<
  const Query extends Directus.Query<Schema, Collections.Button[]>,
>(keys: string[] | number[]) {
  return DirectusSDK.deleteItems<Schema, "button", Query>("button", keys);
}

/**
 * Deletes a single known button item by id.
 */
export function deleteButtonItem(key: string | number) {
  return DirectusSDK.deleteItem<Schema, "button">("button", key);
}

export class ButtonItems
  implements TypedCollectionItemsWrapper<Collections.Button>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Creates many items in the collection.
   */
  async create<
    const Query extends DirectusSDK.Query<Schema, Collections.Button>,
  >(
    items: Partial<Collections.Button>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Button, Query["fields"]>[]
  > {
    return (await this.client.request(
      createButtonItems(items, query as any),
    )) as any; // Seems like a bug in the SDK.
  }

  /**
   * Read many items from the collection.
   */
  async query<const Query extends Directus.Query<Schema, Collections.Button>>(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Button, Query["fields"]>[]
  > {
    return await this.client.request(readButtonItems(query));
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<const Query extends Directus.Query<Schema, Collections.Button>>(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collections.Button, Query["fields"]>
    | undefined
  > {
    const items = await this.client.request(
      readButtonItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // TODO: fix
  }

  /**
   * Update many items in the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.Button[]>,
  >(
    keys: string[] | number[],
    patch: Partial<Collections.Button>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Button, Query["fields"]>[]
  > {
    return await this.client.request(updateButtonItems(keys, patch, query));
  }

  /**
   * Remove many items in the collection.
   */
  async remove<const Query extends Directus.Query<Schema, Collections.Button>>(
    keys: string[] | number[],
  ): Promise<void> {}
}

export class ButtonItem
  implements TypedCollectionItemWrapper<Collections.Button>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Create a single item in the collection.
   */
  async create<const Query extends Directus.Query<Schema, Collections.Button>>(
    item: Partial<Collections.Button>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Button, Query["fields"]>
  > {
    return (await this.client.request(
      createButtonItem(item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<const Query extends Directus.Query<Schema, Collections.Button>>(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collections.Button, Query["fields"]>
    | undefined
  > {
    return await this.client.request(readButtonItem(key, query));
  }

  /**
   * Update a single item from the collection.
   */
  async update<const Query extends Directus.Query<Schema, Collections.Button>>(
    key: string | number,
    patch: Partial<Collections.Button>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collections.Button, Query["fields"]>
    | undefined
  > {
    return (await this.client.request(
      updateButtonItem(key, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<const Query extends Directus.Query<Schema, Collections.Button>>(
    key: string | number,
  ): Promise<void> {
    return await this.client.request(deleteButtonItem(key));
  }
}

/**
 * Create many contact forms items.
 */
export function createContactFormsItems<
  const Query extends Directus.Query<Schema, Collections.ContactForms[]>,
>(items: Partial<Collections.ContactForms>[], query?: Query) {
  return DirectusSDK.createItems<Schema, "contact_forms", Query>(
    "contact_forms",
    items,
    query,
  );
}

/**
 * Create a single contact forms item.
 */
export function createContactFormsItem<
  const Query extends DirectusSDK.Query<Schema, Collections.ContactForms[]>, // Is this a mistake? Why []?
>(item: Partial<Collections.ContactForms>, query?: Query) {
  return DirectusSDK.createItem<Schema, "contact_forms", Query>(
    "contact_forms",
    item,
    query,
  );
}

/**
 * Read many contact forms items.
 */
export function readContactFormsItems<
  const Query extends Directus.Query<Schema, Collections.ContactForms>,
>(query?: Query) {
  return DirectusSDK.readItems<Schema, "contact_forms", Query>(
    "contact_forms",
    query,
  );
}

/**
 * Read many contact forms items.
 */
export const listContactForms = readContactFormsItems;

/**
 * Gets a single known contact forms item by id.
 */
export function readContactFormsItem<
  const Query extends Directus.Query<Schema, Collections.ContactForms>,
>(key: string | number, query?: Query) {
  return DirectusSDK.readItem<Schema, "contact_forms", Query>(
    "contact_forms",
    key,
    query,
  );
}

/**
 * Gets a single known contact forms item by id.
 */
export const readContactForms = readContactFormsItem;

/**
 * Read many contact forms items.
 */
export function updateContactFormsItems<
  const Query extends Directus.Query<Schema, Collections.ContactForms[]>,
>(
  keys: string[] | number[],
  patch: Partial<Collections.ContactForms>,
  query?: Query,
) {
  return DirectusSDK.updateItems<Schema, "contact_forms", Query>(
    "contact_forms",
    keys,
    patch,
    query,
  );
}

/**
 * Gets a single known contact forms item by id.
 */
export function updateContactFormsItem<
  const Query extends Directus.Query<Schema, Collections.ContactForms[]>,
>(
  key: string | number,
  patch: Partial<Collections.ContactForms>,
  query?: Query,
) {
  return DirectusSDK.updateItem<Schema, "contact_forms", Query>(
    "contact_forms",
    key,
    patch,
    query,
  );
}

/**
 * Deletes many contact forms items.
 */
export function deleteContactFormsItems<
  const Query extends Directus.Query<Schema, Collections.ContactForms[]>,
>(keys: string[] | number[]) {
  return DirectusSDK.deleteItems<Schema, "contact_forms", Query>(
    "contact_forms",
    keys,
  );
}

/**
 * Deletes a single known contact forms item by id.
 */
export function deleteContactFormsItem(key: string | number) {
  return DirectusSDK.deleteItem<Schema, "contact_forms">("contact_forms", key);
}

export class ContactFormsItems
  implements TypedCollectionItemsWrapper<Collections.ContactForms>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Creates many items in the collection.
   */
  async create<
    const Query extends DirectusSDK.Query<Schema, Collections.ContactForms>,
  >(
    items: Partial<Collections.ContactForms>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.ContactForms,
      Query["fields"]
    >[]
  > {
    return (await this.client.request(
      createContactFormsItems(items, query as any),
    )) as any; // Seems like a bug in the SDK.
  }

  /**
   * Read many items from the collection.
   */
  async query<
    const Query extends Directus.Query<Schema, Collections.ContactForms>,
  >(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.ContactForms,
      Query["fields"]
    >[]
  > {
    return await this.client.request(readContactFormsItems(query));
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<
    const Query extends Directus.Query<Schema, Collections.ContactForms>,
  >(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.ContactForms,
        Query["fields"]
      >
    | undefined
  > {
    const items = await this.client.request(
      readContactFormsItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // TODO: fix
  }

  /**
   * Update many items in the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.ContactForms[]>,
  >(
    keys: string[] | number[],
    patch: Partial<Collections.ContactForms>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.ContactForms,
      Query["fields"]
    >[]
  > {
    return await this.client.request(
      updateContactFormsItems(keys, patch, query),
    );
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.ContactForms>,
  >(keys: string[] | number[]): Promise<void> {}
}

export class ContactFormsItem
  implements TypedCollectionItemWrapper<Collections.ContactForms>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Create a single item in the collection.
   */
  async create<
    const Query extends Directus.Query<Schema, Collections.ContactForms>,
  >(
    item: Partial<Collections.ContactForms>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.ContactForms,
      Query["fields"]
    >
  > {
    return (await this.client.request(
      createContactFormsItem(item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<
    const Query extends Directus.Query<Schema, Collections.ContactForms>,
  >(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.ContactForms,
        Query["fields"]
      >
    | undefined
  > {
    return await this.client.request(readContactFormsItem(key, query));
  }

  /**
   * Update a single item from the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.ContactForms>,
  >(
    key: string | number,
    patch: Partial<Collections.ContactForms>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.ContactForms,
        Query["fields"]
      >
    | undefined
  > {
    return (await this.client.request(
      updateContactFormsItem(key, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.ContactForms>,
  >(key: string | number): Promise<void> {
    return await this.client.request(deleteContactFormsItem(key));
  }
}

/**
 * Create many gallery items.
 */
export function createGalleryItems<
  const Query extends Directus.Query<Schema, Collections.Gallery[]>,
>(items: Partial<Collections.Gallery>[], query?: Query) {
  return DirectusSDK.createItems<Schema, "gallery", Query>(
    "gallery",
    items,
    query,
  );
}

/**
 * Create a single gallery item.
 */
export function createGalleryItem<
  const Query extends DirectusSDK.Query<Schema, Collections.Gallery[]>, // Is this a mistake? Why []?
>(item: Partial<Collections.Gallery>, query?: Query) {
  return DirectusSDK.createItem<Schema, "gallery", Query>(
    "gallery",
    item,
    query,
  );
}

/**
 * Read many gallery items.
 */
export function readGalleryItems<
  const Query extends Directus.Query<Schema, Collections.Gallery>,
>(query?: Query) {
  return DirectusSDK.readItems<Schema, "gallery", Query>("gallery", query);
}

/**
 * Read many gallery items.
 */
export const listGallery = readGalleryItems;

/**
 * Gets a single known gallery item by id.
 */
export function readGalleryItem<
  const Query extends Directus.Query<Schema, Collections.Gallery>,
>(key: string | number, query?: Query) {
  return DirectusSDK.readItem<Schema, "gallery", Query>("gallery", key, query);
}

/**
 * Gets a single known gallery item by id.
 */
export const readGallery = readGalleryItem;

/**
 * Read many gallery items.
 */
export function updateGalleryItems<
  const Query extends Directus.Query<Schema, Collections.Gallery[]>,
>(
  keys: string[] | number[],
  patch: Partial<Collections.Gallery>,
  query?: Query,
) {
  return DirectusSDK.updateItems<Schema, "gallery", Query>(
    "gallery",
    keys,
    patch,
    query,
  );
}

/**
 * Gets a single known gallery item by id.
 */
export function updateGalleryItem<
  const Query extends Directus.Query<Schema, Collections.Gallery[]>,
>(key: string | number, patch: Partial<Collections.Gallery>, query?: Query) {
  return DirectusSDK.updateItem<Schema, "gallery", Query>(
    "gallery",
    key,
    patch,
    query,
  );
}

/**
 * Deletes many gallery items.
 */
export function deleteGalleryItems<
  const Query extends Directus.Query<Schema, Collections.Gallery[]>,
>(keys: string[] | number[]) {
  return DirectusSDK.deleteItems<Schema, "gallery", Query>("gallery", keys);
}

/**
 * Deletes a single known gallery item by id.
 */
export function deleteGalleryItem(key: string | number) {
  return DirectusSDK.deleteItem<Schema, "gallery">("gallery", key);
}

export class GalleryItems
  implements TypedCollectionItemsWrapper<Collections.Gallery>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Creates many items in the collection.
   */
  async create<
    const Query extends DirectusSDK.Query<Schema, Collections.Gallery>,
  >(
    items: Partial<Collections.Gallery>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Gallery, Query["fields"]>[]
  > {
    return (await this.client.request(
      createGalleryItems(items, query as any),
    )) as any; // Seems like a bug in the SDK.
  }

  /**
   * Read many items from the collection.
   */
  async query<const Query extends Directus.Query<Schema, Collections.Gallery>>(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Gallery, Query["fields"]>[]
  > {
    return await this.client.request(readGalleryItems(query));
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<const Query extends Directus.Query<Schema, Collections.Gallery>>(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collections.Gallery, Query["fields"]>
    | undefined
  > {
    const items = await this.client.request(
      readGalleryItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // TODO: fix
  }

  /**
   * Update many items in the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.Gallery[]>,
  >(
    keys: string[] | number[],
    patch: Partial<Collections.Gallery>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Gallery, Query["fields"]>[]
  > {
    return await this.client.request(updateGalleryItems(keys, patch, query));
  }

  /**
   * Remove many items in the collection.
   */
  async remove<const Query extends Directus.Query<Schema, Collections.Gallery>>(
    keys: string[] | number[],
  ): Promise<void> {}
}

export class GalleryItem
  implements TypedCollectionItemWrapper<Collections.Gallery>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Create a single item in the collection.
   */
  async create<const Query extends Directus.Query<Schema, Collections.Gallery>>(
    item: Partial<Collections.Gallery>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Gallery, Query["fields"]>
  > {
    return (await this.client.request(
      createGalleryItem(item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<const Query extends Directus.Query<Schema, Collections.Gallery>>(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collections.Gallery, Query["fields"]>
    | undefined
  > {
    return await this.client.request(readGalleryItem(key, query));
  }

  /**
   * Update a single item from the collection.
   */
  async update<const Query extends Directus.Query<Schema, Collections.Gallery>>(
    key: string | number,
    patch: Partial<Collections.Gallery>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collections.Gallery, Query["fields"]>
    | undefined
  > {
    return (await this.client.request(
      updateGalleryItem(key, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<const Query extends Directus.Query<Schema, Collections.Gallery>>(
    key: string | number,
  ): Promise<void> {
    return await this.client.request(deleteGalleryItem(key));
  }
}

/**
 * Create many gallery files items.
 */
export function createGalleryFilesItems<
  const Query extends Directus.Query<Schema, Collections.GalleryFiles[]>,
>(items: Partial<Collections.GalleryFiles>[], query?: Query) {
  return DirectusSDK.createItems<Schema, "gallery_files", Query>(
    "gallery_files",
    items,
    query,
  );
}

/**
 * Create a single gallery files item.
 */
export function createGalleryFilesItem<
  const Query extends DirectusSDK.Query<Schema, Collections.GalleryFiles[]>, // Is this a mistake? Why []?
>(item: Partial<Collections.GalleryFiles>, query?: Query) {
  return DirectusSDK.createItem<Schema, "gallery_files", Query>(
    "gallery_files",
    item,
    query,
  );
}

/**
 * Read many gallery files items.
 */
export function readGalleryFilesItems<
  const Query extends Directus.Query<Schema, Collections.GalleryFiles>,
>(query?: Query) {
  return DirectusSDK.readItems<Schema, "gallery_files", Query>(
    "gallery_files",
    query,
  );
}

/**
 * Read many gallery files items.
 */
export const listGalleryFiles = readGalleryFilesItems;

/**
 * Gets a single known gallery files item by id.
 */
export function readGalleryFilesItem<
  const Query extends Directus.Query<Schema, Collections.GalleryFiles>,
>(key: string | number, query?: Query) {
  return DirectusSDK.readItem<Schema, "gallery_files", Query>(
    "gallery_files",
    key,
    query,
  );
}

/**
 * Gets a single known gallery files item by id.
 */
export const readGalleryFiles = readGalleryFilesItem;

/**
 * Read many gallery files items.
 */
export function updateGalleryFilesItems<
  const Query extends Directus.Query<Schema, Collections.GalleryFiles[]>,
>(
  keys: string[] | number[],
  patch: Partial<Collections.GalleryFiles>,
  query?: Query,
) {
  return DirectusSDK.updateItems<Schema, "gallery_files", Query>(
    "gallery_files",
    keys,
    patch,
    query,
  );
}

/**
 * Gets a single known gallery files item by id.
 */
export function updateGalleryFilesItem<
  const Query extends Directus.Query<Schema, Collections.GalleryFiles[]>,
>(
  key: string | number,
  patch: Partial<Collections.GalleryFiles>,
  query?: Query,
) {
  return DirectusSDK.updateItem<Schema, "gallery_files", Query>(
    "gallery_files",
    key,
    patch,
    query,
  );
}

/**
 * Deletes many gallery files items.
 */
export function deleteGalleryFilesItems<
  const Query extends Directus.Query<Schema, Collections.GalleryFiles[]>,
>(keys: string[] | number[]) {
  return DirectusSDK.deleteItems<Schema, "gallery_files", Query>(
    "gallery_files",
    keys,
  );
}

/**
 * Deletes a single known gallery files item by id.
 */
export function deleteGalleryFilesItem(key: string | number) {
  return DirectusSDK.deleteItem<Schema, "gallery_files">("gallery_files", key);
}

export class GalleryFilesItems
  implements TypedCollectionItemsWrapper<Collections.GalleryFiles>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Creates many items in the collection.
   */
  async create<
    const Query extends DirectusSDK.Query<Schema, Collections.GalleryFiles>,
  >(
    items: Partial<Collections.GalleryFiles>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.GalleryFiles,
      Query["fields"]
    >[]
  > {
    return (await this.client.request(
      createGalleryFilesItems(items, query as any),
    )) as any; // Seems like a bug in the SDK.
  }

  /**
   * Read many items from the collection.
   */
  async query<
    const Query extends Directus.Query<Schema, Collections.GalleryFiles>,
  >(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.GalleryFiles,
      Query["fields"]
    >[]
  > {
    return await this.client.request(readGalleryFilesItems(query));
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<
    const Query extends Directus.Query<Schema, Collections.GalleryFiles>,
  >(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.GalleryFiles,
        Query["fields"]
      >
    | undefined
  > {
    const items = await this.client.request(
      readGalleryFilesItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // TODO: fix
  }

  /**
   * Update many items in the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.GalleryFiles[]>,
  >(
    keys: string[] | number[],
    patch: Partial<Collections.GalleryFiles>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.GalleryFiles,
      Query["fields"]
    >[]
  > {
    return await this.client.request(
      updateGalleryFilesItems(keys, patch, query),
    );
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.GalleryFiles>,
  >(keys: string[] | number[]): Promise<void> {}
}

export class GalleryFilesItem
  implements TypedCollectionItemWrapper<Collections.GalleryFiles>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Create a single item in the collection.
   */
  async create<
    const Query extends Directus.Query<Schema, Collections.GalleryFiles>,
  >(
    item: Partial<Collections.GalleryFiles>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.GalleryFiles,
      Query["fields"]
    >
  > {
    return (await this.client.request(
      createGalleryFilesItem(item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<
    const Query extends Directus.Query<Schema, Collections.GalleryFiles>,
  >(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.GalleryFiles,
        Query["fields"]
      >
    | undefined
  > {
    return await this.client.request(readGalleryFilesItem(key, query));
  }

  /**
   * Update a single item from the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.GalleryFiles>,
  >(
    key: string | number,
    patch: Partial<Collections.GalleryFiles>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.GalleryFiles,
        Query["fields"]
      >
    | undefined
  > {
    return (await this.client.request(
      updateGalleryFilesItem(key, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.GalleryFiles>,
  >(key: string | number): Promise<void> {
    return await this.client.request(deleteGalleryFilesItem(key));
  }
}

/**
 * Reads the homepage singleton.
 */
export function readHomepage<
  const Query extends Directus.Query<Schema, Collections.Homepage>,
>(query?: Query) {
  return DirectusSDK.readSingleton<Schema, "homepage", Query>(
    "homepage",
    query,
  );
}

/**
 * Reads the homepage singleton.
 */
export const getHomepage = readHomepage;

/**
 * Create many image items.
 */
export function createImageItems<
  const Query extends Directus.Query<Schema, Collections.Image[]>,
>(items: Partial<Collections.Image>[], query?: Query) {
  return DirectusSDK.createItems<Schema, "image", Query>("image", items, query);
}

/**
 * Create a single image item.
 */
export function createImageItem<
  const Query extends DirectusSDK.Query<Schema, Collections.Image[]>, // Is this a mistake? Why []?
>(item: Partial<Collections.Image>, query?: Query) {
  return DirectusSDK.createItem<Schema, "image", Query>("image", item, query);
}

/**
 * Read many image items.
 */
export function readImageItems<
  const Query extends Directus.Query<Schema, Collections.Image>,
>(query?: Query) {
  return DirectusSDK.readItems<Schema, "image", Query>("image", query);
}

/**
 * Read many image items.
 */
export const listImage = readImageItems;

/**
 * Gets a single known image item by id.
 */
export function readImageItem<
  const Query extends Directus.Query<Schema, Collections.Image>,
>(key: string | number, query?: Query) {
  return DirectusSDK.readItem<Schema, "image", Query>("image", key, query);
}

/**
 * Gets a single known image item by id.
 */
export const readImage = readImageItem;

/**
 * Read many image items.
 */
export function updateImageItems<
  const Query extends Directus.Query<Schema, Collections.Image[]>,
>(keys: string[] | number[], patch: Partial<Collections.Image>, query?: Query) {
  return DirectusSDK.updateItems<Schema, "image", Query>(
    "image",
    keys,
    patch,
    query,
  );
}

/**
 * Gets a single known image item by id.
 */
export function updateImageItem<
  const Query extends Directus.Query<Schema, Collections.Image[]>,
>(key: string | number, patch: Partial<Collections.Image>, query?: Query) {
  return DirectusSDK.updateItem<Schema, "image", Query>(
    "image",
    key,
    patch,
    query,
  );
}

/**
 * Deletes many image items.
 */
export function deleteImageItems<
  const Query extends Directus.Query<Schema, Collections.Image[]>,
>(keys: string[] | number[]) {
  return DirectusSDK.deleteItems<Schema, "image", Query>("image", keys);
}

/**
 * Deletes a single known image item by id.
 */
export function deleteImageItem(key: string | number) {
  return DirectusSDK.deleteItem<Schema, "image">("image", key);
}

export class ImageItems
  implements TypedCollectionItemsWrapper<Collections.Image>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Creates many items in the collection.
   */
  async create<
    const Query extends DirectusSDK.Query<Schema, Collections.Image>,
  >(
    items: Partial<Collections.Image>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Image, Query["fields"]>[]
  > {
    return (await this.client.request(
      createImageItems(items, query as any),
    )) as any; // Seems like a bug in the SDK.
  }

  /**
   * Read many items from the collection.
   */
  async query<const Query extends Directus.Query<Schema, Collections.Image>>(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Image, Query["fields"]>[]
  > {
    return await this.client.request(readImageItems(query));
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<const Query extends Directus.Query<Schema, Collections.Image>>(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collections.Image, Query["fields"]>
    | undefined
  > {
    const items = await this.client.request(
      readImageItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // TODO: fix
  }

  /**
   * Update many items in the collection.
   */
  async update<const Query extends Directus.Query<Schema, Collections.Image[]>>(
    keys: string[] | number[],
    patch: Partial<Collections.Image>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Image, Query["fields"]>[]
  > {
    return await this.client.request(updateImageItems(keys, patch, query));
  }

  /**
   * Remove many items in the collection.
   */
  async remove<const Query extends Directus.Query<Schema, Collections.Image>>(
    keys: string[] | number[],
  ): Promise<void> {}
}

export class ImageItem
  implements TypedCollectionItemWrapper<Collections.Image>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Create a single item in the collection.
   */
  async create<const Query extends Directus.Query<Schema, Collections.Image>>(
    item: Partial<Collections.Image>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Image, Query["fields"]>
  > {
    return (await this.client.request(
      createImageItem(item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<const Query extends Directus.Query<Schema, Collections.Image>>(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collections.Image, Query["fields"]>
    | undefined
  > {
    return await this.client.request(readImageItem(key, query));
  }

  /**
   * Update a single item from the collection.
   */
  async update<const Query extends Directus.Query<Schema, Collections.Image>>(
    key: string | number,
    patch: Partial<Collections.Image>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collections.Image, Query["fields"]>
    | undefined
  > {
    return (await this.client.request(
      updateImageItem(key, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<const Query extends Directus.Query<Schema, Collections.Image>>(
    key: string | number,
  ): Promise<void> {
    return await this.client.request(deleteImageItem(key));
  }
}

/**
 * Create many menu items items.
 */
export function createMenuItemsItems<
  const Query extends Directus.Query<Schema, Collections.MenuItems[]>,
>(items: Partial<Collections.MenuItems>[], query?: Query) {
  return DirectusSDK.createItems<Schema, "menu_items", Query>(
    "menu_items",
    items,
    query,
  );
}

/**
 * Create a single menu items item.
 */
export function createMenuItemsItem<
  const Query extends DirectusSDK.Query<Schema, Collections.MenuItems[]>, // Is this a mistake? Why []?
>(item: Partial<Collections.MenuItems>, query?: Query) {
  return DirectusSDK.createItem<Schema, "menu_items", Query>(
    "menu_items",
    item,
    query,
  );
}

/**
 * Read many menu items items.
 */
export function readMenuItemsItems<
  const Query extends Directus.Query<Schema, Collections.MenuItems>,
>(query?: Query) {
  return DirectusSDK.readItems<Schema, "menu_items", Query>(
    "menu_items",
    query,
  );
}

/**
 * Read many menu items items.
 */
export const listMenuItems = readMenuItemsItems;

/**
 * Gets a single known menu items item by id.
 */
export function readMenuItemsItem<
  const Query extends Directus.Query<Schema, Collections.MenuItems>,
>(key: string | number, query?: Query) {
  return DirectusSDK.readItem<Schema, "menu_items", Query>(
    "menu_items",
    key,
    query,
  );
}

/**
 * Gets a single known menu items item by id.
 */
export const readMenuItems = readMenuItemsItem;

/**
 * Read many menu items items.
 */
export function updateMenuItemsItems<
  const Query extends Directus.Query<Schema, Collections.MenuItems[]>,
>(
  keys: string[] | number[],
  patch: Partial<Collections.MenuItems>,
  query?: Query,
) {
  return DirectusSDK.updateItems<Schema, "menu_items", Query>(
    "menu_items",
    keys,
    patch,
    query,
  );
}

/**
 * Gets a single known menu items item by id.
 */
export function updateMenuItemsItem<
  const Query extends Directus.Query<Schema, Collections.MenuItems[]>,
>(key: string | number, patch: Partial<Collections.MenuItems>, query?: Query) {
  return DirectusSDK.updateItem<Schema, "menu_items", Query>(
    "menu_items",
    key,
    patch,
    query,
  );
}

/**
 * Deletes many menu items items.
 */
export function deleteMenuItemsItems<
  const Query extends Directus.Query<Schema, Collections.MenuItems[]>,
>(keys: string[] | number[]) {
  return DirectusSDK.deleteItems<Schema, "menu_items", Query>(
    "menu_items",
    keys,
  );
}

/**
 * Deletes a single known menu items item by id.
 */
export function deleteMenuItemsItem(key: string | number) {
  return DirectusSDK.deleteItem<Schema, "menu_items">("menu_items", key);
}

export class MenuItemsItems
  implements TypedCollectionItemsWrapper<Collections.MenuItems>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Creates many items in the collection.
   */
  async create<
    const Query extends DirectusSDK.Query<Schema, Collections.MenuItems>,
  >(
    items: Partial<Collections.MenuItems>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.MenuItems,
      Query["fields"]
    >[]
  > {
    return (await this.client.request(
      createMenuItemsItems(items, query as any),
    )) as any; // Seems like a bug in the SDK.
  }

  /**
   * Read many items from the collection.
   */
  async query<
    const Query extends Directus.Query<Schema, Collections.MenuItems>,
  >(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.MenuItems,
      Query["fields"]
    >[]
  > {
    return await this.client.request(readMenuItemsItems(query));
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<const Query extends Directus.Query<Schema, Collections.MenuItems>>(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.MenuItems,
        Query["fields"]
      >
    | undefined
  > {
    const items = await this.client.request(
      readMenuItemsItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // TODO: fix
  }

  /**
   * Update many items in the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.MenuItems[]>,
  >(
    keys: string[] | number[],
    patch: Partial<Collections.MenuItems>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.MenuItems,
      Query["fields"]
    >[]
  > {
    return await this.client.request(updateMenuItemsItems(keys, patch, query));
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.MenuItems>,
  >(keys: string[] | number[]): Promise<void> {}
}

export class MenuItemsItem
  implements TypedCollectionItemWrapper<Collections.MenuItems>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Create a single item in the collection.
   */
  async create<
    const Query extends Directus.Query<Schema, Collections.MenuItems>,
  >(
    item: Partial<Collections.MenuItems>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.MenuItems, Query["fields"]>
  > {
    return (await this.client.request(
      createMenuItemsItem(item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<const Query extends Directus.Query<Schema, Collections.MenuItems>>(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.MenuItems,
        Query["fields"]
      >
    | undefined
  > {
    return await this.client.request(readMenuItemsItem(key, query));
  }

  /**
   * Update a single item from the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.MenuItems>,
  >(
    key: string | number,
    patch: Partial<Collections.MenuItems>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.MenuItems,
        Query["fields"]
      >
    | undefined
  > {
    return (await this.client.request(
      updateMenuItemsItem(key, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.MenuItems>,
  >(key: string | number): Promise<void> {
    return await this.client.request(deleteMenuItemsItem(key));
  }
}

/**
 * Create many menus items.
 */
export function createMenusItems<
  const Query extends Directus.Query<Schema, Collections.Menus[]>,
>(items: Partial<Collections.Menus>[], query?: Query) {
  return DirectusSDK.createItems<Schema, "menus", Query>("menus", items, query);
}

/**
 * Create a single menus item.
 */
export function createMenusItem<
  const Query extends DirectusSDK.Query<Schema, Collections.Menus[]>, // Is this a mistake? Why []?
>(item: Partial<Collections.Menus>, query?: Query) {
  return DirectusSDK.createItem<Schema, "menus", Query>("menus", item, query);
}

/**
 * Read many menus items.
 */
export function readMenusItems<
  const Query extends Directus.Query<Schema, Collections.Menus>,
>(query?: Query) {
  return DirectusSDK.readItems<Schema, "menus", Query>("menus", query);
}

/**
 * Read many menus items.
 */
export const listMenus = readMenusItems;

/**
 * Gets a single known menus item by id.
 */
export function readMenusItem<
  const Query extends Directus.Query<Schema, Collections.Menus>,
>(key: string | number, query?: Query) {
  return DirectusSDK.readItem<Schema, "menus", Query>("menus", key, query);
}

/**
 * Gets a single known menus item by id.
 */
export const readMenus = readMenusItem;

/**
 * Read many menus items.
 */
export function updateMenusItems<
  const Query extends Directus.Query<Schema, Collections.Menus[]>,
>(keys: string[] | number[], patch: Partial<Collections.Menus>, query?: Query) {
  return DirectusSDK.updateItems<Schema, "menus", Query>(
    "menus",
    keys,
    patch,
    query,
  );
}

/**
 * Gets a single known menus item by id.
 */
export function updateMenusItem<
  const Query extends Directus.Query<Schema, Collections.Menus[]>,
>(key: string | number, patch: Partial<Collections.Menus>, query?: Query) {
  return DirectusSDK.updateItem<Schema, "menus", Query>(
    "menus",
    key,
    patch,
    query,
  );
}

/**
 * Deletes many menus items.
 */
export function deleteMenusItems<
  const Query extends Directus.Query<Schema, Collections.Menus[]>,
>(keys: string[] | number[]) {
  return DirectusSDK.deleteItems<Schema, "menus", Query>("menus", keys);
}

/**
 * Deletes a single known menus item by id.
 */
export function deleteMenusItem(key: string | number) {
  return DirectusSDK.deleteItem<Schema, "menus">("menus", key);
}

export class MenusItems
  implements TypedCollectionItemsWrapper<Collections.Menus>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Creates many items in the collection.
   */
  async create<
    const Query extends DirectusSDK.Query<Schema, Collections.Menus>,
  >(
    items: Partial<Collections.Menus>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Menus, Query["fields"]>[]
  > {
    return (await this.client.request(
      createMenusItems(items, query as any),
    )) as any; // Seems like a bug in the SDK.
  }

  /**
   * Read many items from the collection.
   */
  async query<const Query extends Directus.Query<Schema, Collections.Menus>>(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Menus, Query["fields"]>[]
  > {
    return await this.client.request(readMenusItems(query));
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<const Query extends Directus.Query<Schema, Collections.Menus>>(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collections.Menus, Query["fields"]>
    | undefined
  > {
    const items = await this.client.request(
      readMenusItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // TODO: fix
  }

  /**
   * Update many items in the collection.
   */
  async update<const Query extends Directus.Query<Schema, Collections.Menus[]>>(
    keys: string[] | number[],
    patch: Partial<Collections.Menus>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Menus, Query["fields"]>[]
  > {
    return await this.client.request(updateMenusItems(keys, patch, query));
  }

  /**
   * Remove many items in the collection.
   */
  async remove<const Query extends Directus.Query<Schema, Collections.Menus>>(
    keys: string[] | number[],
  ): Promise<void> {}
}

export class MenusItem
  implements TypedCollectionItemWrapper<Collections.Menus>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Create a single item in the collection.
   */
  async create<const Query extends Directus.Query<Schema, Collections.Menus>>(
    item: Partial<Collections.Menus>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Menus, Query["fields"]>
  > {
    return (await this.client.request(
      createMenusItem(item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<const Query extends Directus.Query<Schema, Collections.Menus>>(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collections.Menus, Query["fields"]>
    | undefined
  > {
    return await this.client.request(readMenusItem(key, query));
  }

  /**
   * Update a single item from the collection.
   */
  async update<const Query extends Directus.Query<Schema, Collections.Menus>>(
    key: string | number,
    patch: Partial<Collections.Menus>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collections.Menus, Query["fields"]>
    | undefined
  > {
    return (await this.client.request(
      updateMenusItem(key, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<const Query extends Directus.Query<Schema, Collections.Menus>>(
    key: string | number,
  ): Promise<void> {
    return await this.client.request(deleteMenusItem(key));
  }
}

/**
 * Create many pages items.
 */
export function createPagesItems<
  const Query extends Directus.Query<Schema, Collections.Pages[]>,
>(items: Partial<Collections.Pages>[], query?: Query) {
  return DirectusSDK.createItems<Schema, "pages", Query>("pages", items, query);
}

/**
 * Create a single pages item.
 */
export function createPagesItem<
  const Query extends DirectusSDK.Query<Schema, Collections.Pages[]>, // Is this a mistake? Why []?
>(item: Partial<Collections.Pages>, query?: Query) {
  return DirectusSDK.createItem<Schema, "pages", Query>("pages", item, query);
}

/**
 * Read many pages items.
 */
export function readPagesItems<
  const Query extends Directus.Query<Schema, Collections.Pages>,
>(query?: Query) {
  return DirectusSDK.readItems<Schema, "pages", Query>("pages", query);
}

/**
 * Read many pages items.
 */
export const listPages = readPagesItems;

/**
 * Gets a single known pages item by id.
 */
export function readPagesItem<
  const Query extends Directus.Query<Schema, Collections.Pages>,
>(key: string | number, query?: Query) {
  return DirectusSDK.readItem<Schema, "pages", Query>("pages", key, query);
}

/**
 * Gets a single known pages item by id.
 */
export const readPages = readPagesItem;

/**
 * Read many pages items.
 */
export function updatePagesItems<
  const Query extends Directus.Query<Schema, Collections.Pages[]>,
>(keys: string[] | number[], patch: Partial<Collections.Pages>, query?: Query) {
  return DirectusSDK.updateItems<Schema, "pages", Query>(
    "pages",
    keys,
    patch,
    query,
  );
}

/**
 * Gets a single known pages item by id.
 */
export function updatePagesItem<
  const Query extends Directus.Query<Schema, Collections.Pages[]>,
>(key: string | number, patch: Partial<Collections.Pages>, query?: Query) {
  return DirectusSDK.updateItem<Schema, "pages", Query>(
    "pages",
    key,
    patch,
    query,
  );
}

/**
 * Deletes many pages items.
 */
export function deletePagesItems<
  const Query extends Directus.Query<Schema, Collections.Pages[]>,
>(keys: string[] | number[]) {
  return DirectusSDK.deleteItems<Schema, "pages", Query>("pages", keys);
}

/**
 * Deletes a single known pages item by id.
 */
export function deletePagesItem(key: string | number) {
  return DirectusSDK.deleteItem<Schema, "pages">("pages", key);
}

export class PagesItems
  implements TypedCollectionItemsWrapper<Collections.Pages>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Creates many items in the collection.
   */
  async create<
    const Query extends DirectusSDK.Query<Schema, Collections.Pages>,
  >(
    items: Partial<Collections.Pages>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Pages, Query["fields"]>[]
  > {
    return (await this.client.request(
      createPagesItems(items, query as any),
    )) as any; // Seems like a bug in the SDK.
  }

  /**
   * Read many items from the collection.
   */
  async query<const Query extends Directus.Query<Schema, Collections.Pages>>(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Pages, Query["fields"]>[]
  > {
    return await this.client.request(readPagesItems(query));
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<const Query extends Directus.Query<Schema, Collections.Pages>>(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collections.Pages, Query["fields"]>
    | undefined
  > {
    const items = await this.client.request(
      readPagesItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // TODO: fix
  }

  /**
   * Update many items in the collection.
   */
  async update<const Query extends Directus.Query<Schema, Collections.Pages[]>>(
    keys: string[] | number[],
    patch: Partial<Collections.Pages>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Pages, Query["fields"]>[]
  > {
    return await this.client.request(updatePagesItems(keys, patch, query));
  }

  /**
   * Remove many items in the collection.
   */
  async remove<const Query extends Directus.Query<Schema, Collections.Pages>>(
    keys: string[] | number[],
  ): Promise<void> {}
}

export class PagesItem
  implements TypedCollectionItemWrapper<Collections.Pages>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Create a single item in the collection.
   */
  async create<const Query extends Directus.Query<Schema, Collections.Pages>>(
    item: Partial<Collections.Pages>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Pages, Query["fields"]>
  > {
    return (await this.client.request(
      createPagesItem(item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<const Query extends Directus.Query<Schema, Collections.Pages>>(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collections.Pages, Query["fields"]>
    | undefined
  > {
    return await this.client.request(readPagesItem(key, query));
  }

  /**
   * Update a single item from the collection.
   */
  async update<const Query extends Directus.Query<Schema, Collections.Pages>>(
    key: string | number,
    patch: Partial<Collections.Pages>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collections.Pages, Query["fields"]>
    | undefined
  > {
    return (await this.client.request(
      updatePagesItem(key, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<const Query extends Directus.Query<Schema, Collections.Pages>>(
    key: string | number,
  ): Promise<void> {
    return await this.client.request(deletePagesItem(key));
  }
}

/**
 * Create many pages editor nodes items.
 */
export function createPagesEditorNodesItems<
  const Query extends Directus.Query<Schema, Collections.PagesEditorNodes[]>,
>(items: Partial<Collections.PagesEditorNodes>[], query?: Query) {
  return DirectusSDK.createItems<Schema, "pages_editor_nodes", Query>(
    "pages_editor_nodes",
    items,
    query,
  );
}

/**
 * Create a single pages editor nodes item.
 */
export function createPagesEditorNodesItem<
  const Query extends DirectusSDK.Query<Schema, Collections.PagesEditorNodes[]>, // Is this a mistake? Why []?
>(item: Partial<Collections.PagesEditorNodes>, query?: Query) {
  return DirectusSDK.createItem<Schema, "pages_editor_nodes", Query>(
    "pages_editor_nodes",
    item,
    query,
  );
}

/**
 * Read many pages editor nodes items.
 */
export function readPagesEditorNodesItems<
  const Query extends Directus.Query<Schema, Collections.PagesEditorNodes>,
>(query?: Query) {
  return DirectusSDK.readItems<Schema, "pages_editor_nodes", Query>(
    "pages_editor_nodes",
    query,
  );
}

/**
 * Read many pages editor nodes items.
 */
export const listPagesEditorNodes = readPagesEditorNodesItems;

/**
 * Gets a single known pages editor nodes item by id.
 */
export function readPagesEditorNodesItem<
  const Query extends Directus.Query<Schema, Collections.PagesEditorNodes>,
>(key: string | number, query?: Query) {
  return DirectusSDK.readItem<Schema, "pages_editor_nodes", Query>(
    "pages_editor_nodes",
    key,
    query,
  );
}

/**
 * Gets a single known pages editor nodes item by id.
 */
export const readPagesEditorNodes = readPagesEditorNodesItem;

/**
 * Read many pages editor nodes items.
 */
export function updatePagesEditorNodesItems<
  const Query extends Directus.Query<Schema, Collections.PagesEditorNodes[]>,
>(
  keys: string[] | number[],
  patch: Partial<Collections.PagesEditorNodes>,
  query?: Query,
) {
  return DirectusSDK.updateItems<Schema, "pages_editor_nodes", Query>(
    "pages_editor_nodes",
    keys,
    patch,
    query,
  );
}

/**
 * Gets a single known pages editor nodes item by id.
 */
export function updatePagesEditorNodesItem<
  const Query extends Directus.Query<Schema, Collections.PagesEditorNodes[]>,
>(
  key: string | number,
  patch: Partial<Collections.PagesEditorNodes>,
  query?: Query,
) {
  return DirectusSDK.updateItem<Schema, "pages_editor_nodes", Query>(
    "pages_editor_nodes",
    key,
    patch,
    query,
  );
}

/**
 * Deletes many pages editor nodes items.
 */
export function deletePagesEditorNodesItems<
  const Query extends Directus.Query<Schema, Collections.PagesEditorNodes[]>,
>(keys: string[] | number[]) {
  return DirectusSDK.deleteItems<Schema, "pages_editor_nodes", Query>(
    "pages_editor_nodes",
    keys,
  );
}

/**
 * Deletes a single known pages editor nodes item by id.
 */
export function deletePagesEditorNodesItem(key: string | number) {
  return DirectusSDK.deleteItem<Schema, "pages_editor_nodes">(
    "pages_editor_nodes",
    key,
  );
}

export class PagesEditorNodesItems
  implements TypedCollectionItemsWrapper<Collections.PagesEditorNodes>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Creates many items in the collection.
   */
  async create<
    const Query extends DirectusSDK.Query<Schema, Collections.PagesEditorNodes>,
  >(
    items: Partial<Collections.PagesEditorNodes>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.PagesEditorNodes,
      Query["fields"]
    >[]
  > {
    return (await this.client.request(
      createPagesEditorNodesItems(items, query as any),
    )) as any; // Seems like a bug in the SDK.
  }

  /**
   * Read many items from the collection.
   */
  async query<
    const Query extends Directus.Query<Schema, Collections.PagesEditorNodes>,
  >(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.PagesEditorNodes,
      Query["fields"]
    >[]
  > {
    return await this.client.request(readPagesEditorNodesItems(query));
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<
    const Query extends Directus.Query<Schema, Collections.PagesEditorNodes>,
  >(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.PagesEditorNodes,
        Query["fields"]
      >
    | undefined
  > {
    const items = await this.client.request(
      readPagesEditorNodesItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // TODO: fix
  }

  /**
   * Update many items in the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.PagesEditorNodes[]>,
  >(
    keys: string[] | number[],
    patch: Partial<Collections.PagesEditorNodes>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.PagesEditorNodes,
      Query["fields"]
    >[]
  > {
    return await this.client.request(
      updatePagesEditorNodesItems(keys, patch, query),
    );
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.PagesEditorNodes>,
  >(keys: string[] | number[]): Promise<void> {}
}

export class PagesEditorNodesItem
  implements TypedCollectionItemWrapper<Collections.PagesEditorNodes>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Create a single item in the collection.
   */
  async create<
    const Query extends Directus.Query<Schema, Collections.PagesEditorNodes>,
  >(
    item: Partial<Collections.PagesEditorNodes>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.PagesEditorNodes,
      Query["fields"]
    >
  > {
    return (await this.client.request(
      createPagesEditorNodesItem(item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<
    const Query extends Directus.Query<Schema, Collections.PagesEditorNodes>,
  >(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.PagesEditorNodes,
        Query["fields"]
      >
    | undefined
  > {
    return await this.client.request(readPagesEditorNodesItem(key, query));
  }

  /**
   * Update a single item from the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.PagesEditorNodes>,
  >(
    key: string | number,
    patch: Partial<Collections.PagesEditorNodes>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.PagesEditorNodes,
        Query["fields"]
      >
    | undefined
  > {
    return (await this.client.request(
      updatePagesEditorNodesItem(key, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.PagesEditorNodes>,
  >(key: string | number): Promise<void> {
    return await this.client.request(deletePagesEditorNodesItem(key));
  }
}

/**
 * Create many quote items.
 */
export function createQuoteItems<
  const Query extends Directus.Query<Schema, Collections.Quote[]>,
>(items: Partial<Collections.Quote>[], query?: Query) {
  return DirectusSDK.createItems<Schema, "quote", Query>("quote", items, query);
}

/**
 * Create a single quote item.
 */
export function createQuoteItem<
  const Query extends DirectusSDK.Query<Schema, Collections.Quote[]>, // Is this a mistake? Why []?
>(item: Partial<Collections.Quote>, query?: Query) {
  return DirectusSDK.createItem<Schema, "quote", Query>("quote", item, query);
}

/**
 * Read many quote items.
 */
export function readQuoteItems<
  const Query extends Directus.Query<Schema, Collections.Quote>,
>(query?: Query) {
  return DirectusSDK.readItems<Schema, "quote", Query>("quote", query);
}

/**
 * Read many quote items.
 */
export const listQuote = readQuoteItems;

/**
 * Gets a single known quote item by id.
 */
export function readQuoteItem<
  const Query extends Directus.Query<Schema, Collections.Quote>,
>(key: string | number, query?: Query) {
  return DirectusSDK.readItem<Schema, "quote", Query>("quote", key, query);
}

/**
 * Gets a single known quote item by id.
 */
export const readQuote = readQuoteItem;

/**
 * Read many quote items.
 */
export function updateQuoteItems<
  const Query extends Directus.Query<Schema, Collections.Quote[]>,
>(keys: string[] | number[], patch: Partial<Collections.Quote>, query?: Query) {
  return DirectusSDK.updateItems<Schema, "quote", Query>(
    "quote",
    keys,
    patch,
    query,
  );
}

/**
 * Gets a single known quote item by id.
 */
export function updateQuoteItem<
  const Query extends Directus.Query<Schema, Collections.Quote[]>,
>(key: string | number, patch: Partial<Collections.Quote>, query?: Query) {
  return DirectusSDK.updateItem<Schema, "quote", Query>(
    "quote",
    key,
    patch,
    query,
  );
}

/**
 * Deletes many quote items.
 */
export function deleteQuoteItems<
  const Query extends Directus.Query<Schema, Collections.Quote[]>,
>(keys: string[] | number[]) {
  return DirectusSDK.deleteItems<Schema, "quote", Query>("quote", keys);
}

/**
 * Deletes a single known quote item by id.
 */
export function deleteQuoteItem(key: string | number) {
  return DirectusSDK.deleteItem<Schema, "quote">("quote", key);
}

export class QuoteItems
  implements TypedCollectionItemsWrapper<Collections.Quote>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Creates many items in the collection.
   */
  async create<
    const Query extends DirectusSDK.Query<Schema, Collections.Quote>,
  >(
    items: Partial<Collections.Quote>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Quote, Query["fields"]>[]
  > {
    return (await this.client.request(
      createQuoteItems(items, query as any),
    )) as any; // Seems like a bug in the SDK.
  }

  /**
   * Read many items from the collection.
   */
  async query<const Query extends Directus.Query<Schema, Collections.Quote>>(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Quote, Query["fields"]>[]
  > {
    return await this.client.request(readQuoteItems(query));
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<const Query extends Directus.Query<Schema, Collections.Quote>>(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collections.Quote, Query["fields"]>
    | undefined
  > {
    const items = await this.client.request(
      readQuoteItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // TODO: fix
  }

  /**
   * Update many items in the collection.
   */
  async update<const Query extends Directus.Query<Schema, Collections.Quote[]>>(
    keys: string[] | number[],
    patch: Partial<Collections.Quote>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Quote, Query["fields"]>[]
  > {
    return await this.client.request(updateQuoteItems(keys, patch, query));
  }

  /**
   * Remove many items in the collection.
   */
  async remove<const Query extends Directus.Query<Schema, Collections.Quote>>(
    keys: string[] | number[],
  ): Promise<void> {}
}

export class QuoteItem
  implements TypedCollectionItemWrapper<Collections.Quote>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Create a single item in the collection.
   */
  async create<const Query extends Directus.Query<Schema, Collections.Quote>>(
    item: Partial<Collections.Quote>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Quote, Query["fields"]>
  > {
    return (await this.client.request(
      createQuoteItem(item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<const Query extends Directus.Query<Schema, Collections.Quote>>(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collections.Quote, Query["fields"]>
    | undefined
  > {
    return await this.client.request(readQuoteItem(key, query));
  }

  /**
   * Update a single item from the collection.
   */
  async update<const Query extends Directus.Query<Schema, Collections.Quote>>(
    key: string | number,
    patch: Partial<Collections.Quote>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collections.Quote, Query["fields"]>
    | undefined
  > {
    return (await this.client.request(
      updateQuoteItem(key, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<const Query extends Directus.Query<Schema, Collections.Quote>>(
    key: string | number,
  ): Promise<void> {
    return await this.client.request(deleteQuoteItem(key));
  }
}

/**
 * Create many section items.
 */
export function createSectionItems<
  const Query extends Directus.Query<Schema, Collections.Section[]>,
>(items: Partial<Collections.Section>[], query?: Query) {
  return DirectusSDK.createItems<Schema, "section", Query>(
    "section",
    items,
    query,
  );
}

/**
 * Create a single section item.
 */
export function createSectionItem<
  const Query extends DirectusSDK.Query<Schema, Collections.Section[]>, // Is this a mistake? Why []?
>(item: Partial<Collections.Section>, query?: Query) {
  return DirectusSDK.createItem<Schema, "section", Query>(
    "section",
    item,
    query,
  );
}

/**
 * Read many section items.
 */
export function readSectionItems<
  const Query extends Directus.Query<Schema, Collections.Section>,
>(query?: Query) {
  return DirectusSDK.readItems<Schema, "section", Query>("section", query);
}

/**
 * Read many section items.
 */
export const listSection = readSectionItems;

/**
 * Gets a single known section item by id.
 */
export function readSectionItem<
  const Query extends Directus.Query<Schema, Collections.Section>,
>(key: string | number, query?: Query) {
  return DirectusSDK.readItem<Schema, "section", Query>("section", key, query);
}

/**
 * Gets a single known section item by id.
 */
export const readSection = readSectionItem;

/**
 * Read many section items.
 */
export function updateSectionItems<
  const Query extends Directus.Query<Schema, Collections.Section[]>,
>(
  keys: string[] | number[],
  patch: Partial<Collections.Section>,
  query?: Query,
) {
  return DirectusSDK.updateItems<Schema, "section", Query>(
    "section",
    keys,
    patch,
    query,
  );
}

/**
 * Gets a single known section item by id.
 */
export function updateSectionItem<
  const Query extends Directus.Query<Schema, Collections.Section[]>,
>(key: string | number, patch: Partial<Collections.Section>, query?: Query) {
  return DirectusSDK.updateItem<Schema, "section", Query>(
    "section",
    key,
    patch,
    query,
  );
}

/**
 * Deletes many section items.
 */
export function deleteSectionItems<
  const Query extends Directus.Query<Schema, Collections.Section[]>,
>(keys: string[] | number[]) {
  return DirectusSDK.deleteItems<Schema, "section", Query>("section", keys);
}

/**
 * Deletes a single known section item by id.
 */
export function deleteSectionItem(key: string | number) {
  return DirectusSDK.deleteItem<Schema, "section">("section", key);
}

export class SectionItems
  implements TypedCollectionItemsWrapper<Collections.Section>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Creates many items in the collection.
   */
  async create<
    const Query extends DirectusSDK.Query<Schema, Collections.Section>,
  >(
    items: Partial<Collections.Section>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Section, Query["fields"]>[]
  > {
    return (await this.client.request(
      createSectionItems(items, query as any),
    )) as any; // Seems like a bug in the SDK.
  }

  /**
   * Read many items from the collection.
   */
  async query<const Query extends Directus.Query<Schema, Collections.Section>>(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Section, Query["fields"]>[]
  > {
    return await this.client.request(readSectionItems(query));
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<const Query extends Directus.Query<Schema, Collections.Section>>(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collections.Section, Query["fields"]>
    | undefined
  > {
    const items = await this.client.request(
      readSectionItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // TODO: fix
  }

  /**
   * Update many items in the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.Section[]>,
  >(
    keys: string[] | number[],
    patch: Partial<Collections.Section>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Section, Query["fields"]>[]
  > {
    return await this.client.request(updateSectionItems(keys, patch, query));
  }

  /**
   * Remove many items in the collection.
   */
  async remove<const Query extends Directus.Query<Schema, Collections.Section>>(
    keys: string[] | number[],
  ): Promise<void> {}
}

export class SectionItem
  implements TypedCollectionItemWrapper<Collections.Section>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Create a single item in the collection.
   */
  async create<const Query extends Directus.Query<Schema, Collections.Section>>(
    item: Partial<Collections.Section>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Section, Query["fields"]>
  > {
    return (await this.client.request(
      createSectionItem(item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<const Query extends Directus.Query<Schema, Collections.Section>>(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collections.Section, Query["fields"]>
    | undefined
  > {
    return await this.client.request(readSectionItem(key, query));
  }

  /**
   * Update a single item from the collection.
   */
  async update<const Query extends Directus.Query<Schema, Collections.Section>>(
    key: string | number,
    patch: Partial<Collections.Section>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collections.Section, Query["fields"]>
    | undefined
  > {
    return (await this.client.request(
      updateSectionItem(key, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<const Query extends Directus.Query<Schema, Collections.Section>>(
    key: string | number,
  ): Promise<void> {
    return await this.client.request(deleteSectionItem(key));
  }
}

/**
 * Create many section editor nodes items.
 */
export function createSectionEditorNodesItems<
  const Query extends Directus.Query<Schema, Collections.SectionEditorNodes[]>,
>(items: Partial<Collections.SectionEditorNodes>[], query?: Query) {
  return DirectusSDK.createItems<Schema, "section_editor_nodes", Query>(
    "section_editor_nodes",
    items,
    query,
  );
}

/**
 * Create a single section editor nodes item.
 */
export function createSectionEditorNodesItem<
  const Query extends DirectusSDK.Query<
    Schema,
    Collections.SectionEditorNodes[]
  >, // Is this a mistake? Why []?
>(item: Partial<Collections.SectionEditorNodes>, query?: Query) {
  return DirectusSDK.createItem<Schema, "section_editor_nodes", Query>(
    "section_editor_nodes",
    item,
    query,
  );
}

/**
 * Read many section editor nodes items.
 */
export function readSectionEditorNodesItems<
  const Query extends Directus.Query<Schema, Collections.SectionEditorNodes>,
>(query?: Query) {
  return DirectusSDK.readItems<Schema, "section_editor_nodes", Query>(
    "section_editor_nodes",
    query,
  );
}

/**
 * Read many section editor nodes items.
 */
export const listSectionEditorNodes = readSectionEditorNodesItems;

/**
 * Gets a single known section editor nodes item by id.
 */
export function readSectionEditorNodesItem<
  const Query extends Directus.Query<Schema, Collections.SectionEditorNodes>,
>(key: string | number, query?: Query) {
  return DirectusSDK.readItem<Schema, "section_editor_nodes", Query>(
    "section_editor_nodes",
    key,
    query,
  );
}

/**
 * Gets a single known section editor nodes item by id.
 */
export const readSectionEditorNodes = readSectionEditorNodesItem;

/**
 * Read many section editor nodes items.
 */
export function updateSectionEditorNodesItems<
  const Query extends Directus.Query<Schema, Collections.SectionEditorNodes[]>,
>(
  keys: string[] | number[],
  patch: Partial<Collections.SectionEditorNodes>,
  query?: Query,
) {
  return DirectusSDK.updateItems<Schema, "section_editor_nodes", Query>(
    "section_editor_nodes",
    keys,
    patch,
    query,
  );
}

/**
 * Gets a single known section editor nodes item by id.
 */
export function updateSectionEditorNodesItem<
  const Query extends Directus.Query<Schema, Collections.SectionEditorNodes[]>,
>(
  key: string | number,
  patch: Partial<Collections.SectionEditorNodes>,
  query?: Query,
) {
  return DirectusSDK.updateItem<Schema, "section_editor_nodes", Query>(
    "section_editor_nodes",
    key,
    patch,
    query,
  );
}

/**
 * Deletes many section editor nodes items.
 */
export function deleteSectionEditorNodesItems<
  const Query extends Directus.Query<Schema, Collections.SectionEditorNodes[]>,
>(keys: string[] | number[]) {
  return DirectusSDK.deleteItems<Schema, "section_editor_nodes", Query>(
    "section_editor_nodes",
    keys,
  );
}

/**
 * Deletes a single known section editor nodes item by id.
 */
export function deleteSectionEditorNodesItem(key: string | number) {
  return DirectusSDK.deleteItem<Schema, "section_editor_nodes">(
    "section_editor_nodes",
    key,
  );
}

export class SectionEditorNodesItems
  implements TypedCollectionItemsWrapper<Collections.SectionEditorNodes>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Creates many items in the collection.
   */
  async create<
    const Query extends DirectusSDK.Query<
      Schema,
      Collections.SectionEditorNodes
    >,
  >(
    items: Partial<Collections.SectionEditorNodes>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.SectionEditorNodes,
      Query["fields"]
    >[]
  > {
    return (await this.client.request(
      createSectionEditorNodesItems(items, query as any),
    )) as any; // Seems like a bug in the SDK.
  }

  /**
   * Read many items from the collection.
   */
  async query<
    const Query extends Directus.Query<Schema, Collections.SectionEditorNodes>,
  >(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.SectionEditorNodes,
      Query["fields"]
    >[]
  > {
    return await this.client.request(readSectionEditorNodesItems(query));
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<
    const Query extends Directus.Query<Schema, Collections.SectionEditorNodes>,
  >(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.SectionEditorNodes,
        Query["fields"]
      >
    | undefined
  > {
    const items = await this.client.request(
      readSectionEditorNodesItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // TODO: fix
  }

  /**
   * Update many items in the collection.
   */
  async update<
    const Query extends Directus.Query<
      Schema,
      Collections.SectionEditorNodes[]
    >,
  >(
    keys: string[] | number[],
    patch: Partial<Collections.SectionEditorNodes>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.SectionEditorNodes,
      Query["fields"]
    >[]
  > {
    return await this.client.request(
      updateSectionEditorNodesItems(keys, patch, query),
    );
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.SectionEditorNodes>,
  >(keys: string[] | number[]): Promise<void> {}
}

export class SectionEditorNodesItem
  implements TypedCollectionItemWrapper<Collections.SectionEditorNodes>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Create a single item in the collection.
   */
  async create<
    const Query extends Directus.Query<Schema, Collections.SectionEditorNodes>,
  >(
    item: Partial<Collections.SectionEditorNodes>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.SectionEditorNodes,
      Query["fields"]
    >
  > {
    return (await this.client.request(
      createSectionEditorNodesItem(item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<
    const Query extends Directus.Query<Schema, Collections.SectionEditorNodes>,
  >(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.SectionEditorNodes,
        Query["fields"]
      >
    | undefined
  > {
    return await this.client.request(readSectionEditorNodesItem(key, query));
  }

  /**
   * Update a single item from the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.SectionEditorNodes>,
  >(
    key: string | number,
    patch: Partial<Collections.SectionEditorNodes>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.SectionEditorNodes,
        Query["fields"]
      >
    | undefined
  > {
    return (await this.client.request(
      updateSectionEditorNodesItem(key, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.SectionEditorNodes>,
  >(key: string | number): Promise<void> {
    return await this.client.request(deleteSectionEditorNodesItem(key));
  }
}

/**
 * Create many seo advanced setting items.
 */
export function createSeoAdvancedSettingItems<
  const Query extends Directus.Query<Schema, Collections.SeoAdvancedSetting[]>,
>(items: Partial<Collections.SeoAdvancedSetting>[], query?: Query) {
  return DirectusSDK.createItems<Schema, "seo_advanced_setting", Query>(
    "seo_advanced_setting",
    items,
    query,
  );
}

/**
 * Create a single seo advanced setting item.
 */
export function createSeoAdvancedSettingItem<
  const Query extends DirectusSDK.Query<
    Schema,
    Collections.SeoAdvancedSetting[]
  >, // Is this a mistake? Why []?
>(item: Partial<Collections.SeoAdvancedSetting>, query?: Query) {
  return DirectusSDK.createItem<Schema, "seo_advanced_setting", Query>(
    "seo_advanced_setting",
    item,
    query,
  );
}

/**
 * Read many seo advanced setting items.
 */
export function readSeoAdvancedSettingItems<
  const Query extends Directus.Query<Schema, Collections.SeoAdvancedSetting>,
>(query?: Query) {
  return DirectusSDK.readItems<Schema, "seo_advanced_setting", Query>(
    "seo_advanced_setting",
    query,
  );
}

/**
 * Read many seo advanced setting items.
 */
export const listSeoAdvancedSetting = readSeoAdvancedSettingItems;

/**
 * Gets a single known seo advanced setting item by id.
 */
export function readSeoAdvancedSettingItem<
  const Query extends Directus.Query<Schema, Collections.SeoAdvancedSetting>,
>(key: string | number, query?: Query) {
  return DirectusSDK.readItem<Schema, "seo_advanced_setting", Query>(
    "seo_advanced_setting",
    key,
    query,
  );
}

/**
 * Gets a single known seo advanced setting item by id.
 */
export const readSeoAdvancedSetting = readSeoAdvancedSettingItem;

/**
 * Read many seo advanced setting items.
 */
export function updateSeoAdvancedSettingItems<
  const Query extends Directus.Query<Schema, Collections.SeoAdvancedSetting[]>,
>(
  keys: string[] | number[],
  patch: Partial<Collections.SeoAdvancedSetting>,
  query?: Query,
) {
  return DirectusSDK.updateItems<Schema, "seo_advanced_setting", Query>(
    "seo_advanced_setting",
    keys,
    patch,
    query,
  );
}

/**
 * Gets a single known seo advanced setting item by id.
 */
export function updateSeoAdvancedSettingItem<
  const Query extends Directus.Query<Schema, Collections.SeoAdvancedSetting[]>,
>(
  key: string | number,
  patch: Partial<Collections.SeoAdvancedSetting>,
  query?: Query,
) {
  return DirectusSDK.updateItem<Schema, "seo_advanced_setting", Query>(
    "seo_advanced_setting",
    key,
    patch,
    query,
  );
}

/**
 * Deletes many seo advanced setting items.
 */
export function deleteSeoAdvancedSettingItems<
  const Query extends Directus.Query<Schema, Collections.SeoAdvancedSetting[]>,
>(keys: string[] | number[]) {
  return DirectusSDK.deleteItems<Schema, "seo_advanced_setting", Query>(
    "seo_advanced_setting",
    keys,
  );
}

/**
 * Deletes a single known seo advanced setting item by id.
 */
export function deleteSeoAdvancedSettingItem(key: string | number) {
  return DirectusSDK.deleteItem<Schema, "seo_advanced_setting">(
    "seo_advanced_setting",
    key,
  );
}

export class SeoAdvancedSettingItems
  implements TypedCollectionItemsWrapper<Collections.SeoAdvancedSetting>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Creates many items in the collection.
   */
  async create<
    const Query extends DirectusSDK.Query<
      Schema,
      Collections.SeoAdvancedSetting
    >,
  >(
    items: Partial<Collections.SeoAdvancedSetting>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.SeoAdvancedSetting,
      Query["fields"]
    >[]
  > {
    return (await this.client.request(
      createSeoAdvancedSettingItems(items, query as any),
    )) as any; // Seems like a bug in the SDK.
  }

  /**
   * Read many items from the collection.
   */
  async query<
    const Query extends Directus.Query<Schema, Collections.SeoAdvancedSetting>,
  >(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.SeoAdvancedSetting,
      Query["fields"]
    >[]
  > {
    return await this.client.request(readSeoAdvancedSettingItems(query));
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<
    const Query extends Directus.Query<Schema, Collections.SeoAdvancedSetting>,
  >(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.SeoAdvancedSetting,
        Query["fields"]
      >
    | undefined
  > {
    const items = await this.client.request(
      readSeoAdvancedSettingItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // TODO: fix
  }

  /**
   * Update many items in the collection.
   */
  async update<
    const Query extends Directus.Query<
      Schema,
      Collections.SeoAdvancedSetting[]
    >,
  >(
    keys: string[] | number[],
    patch: Partial<Collections.SeoAdvancedSetting>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.SeoAdvancedSetting,
      Query["fields"]
    >[]
  > {
    return await this.client.request(
      updateSeoAdvancedSettingItems(keys, patch, query),
    );
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.SeoAdvancedSetting>,
  >(keys: string[] | number[]): Promise<void> {}
}

export class SeoAdvancedSettingItem
  implements TypedCollectionItemWrapper<Collections.SeoAdvancedSetting>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Create a single item in the collection.
   */
  async create<
    const Query extends Directus.Query<Schema, Collections.SeoAdvancedSetting>,
  >(
    item: Partial<Collections.SeoAdvancedSetting>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.SeoAdvancedSetting,
      Query["fields"]
    >
  > {
    return (await this.client.request(
      createSeoAdvancedSettingItem(item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<
    const Query extends Directus.Query<Schema, Collections.SeoAdvancedSetting>,
  >(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.SeoAdvancedSetting,
        Query["fields"]
      >
    | undefined
  > {
    return await this.client.request(readSeoAdvancedSettingItem(key, query));
  }

  /**
   * Update a single item from the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.SeoAdvancedSetting>,
  >(
    key: string | number,
    patch: Partial<Collections.SeoAdvancedSetting>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.SeoAdvancedSetting,
        Query["fields"]
      >
    | undefined
  > {
    return (await this.client.request(
      updateSeoAdvancedSettingItem(key, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.SeoAdvancedSetting>,
  >(key: string | number): Promise<void> {
    return await this.client.request(deleteSeoAdvancedSettingItem(key));
  }
}

/**
 * Create many seo detail items.
 */
export function createSeoDetailItems<
  const Query extends Directus.Query<Schema, Collections.SeoDetail[]>,
>(items: Partial<Collections.SeoDetail>[], query?: Query) {
  return DirectusSDK.createItems<Schema, "seo_detail", Query>(
    "seo_detail",
    items,
    query,
  );
}

/**
 * Create a single seo detail item.
 */
export function createSeoDetailItem<
  const Query extends DirectusSDK.Query<Schema, Collections.SeoDetail[]>, // Is this a mistake? Why []?
>(item: Partial<Collections.SeoDetail>, query?: Query) {
  return DirectusSDK.createItem<Schema, "seo_detail", Query>(
    "seo_detail",
    item,
    query,
  );
}

/**
 * Read many seo detail items.
 */
export function readSeoDetailItems<
  const Query extends Directus.Query<Schema, Collections.SeoDetail>,
>(query?: Query) {
  return DirectusSDK.readItems<Schema, "seo_detail", Query>(
    "seo_detail",
    query,
  );
}

/**
 * Read many seo detail items.
 */
export const listSeoDetail = readSeoDetailItems;

/**
 * Gets a single known seo detail item by id.
 */
export function readSeoDetailItem<
  const Query extends Directus.Query<Schema, Collections.SeoDetail>,
>(key: string | number, query?: Query) {
  return DirectusSDK.readItem<Schema, "seo_detail", Query>(
    "seo_detail",
    key,
    query,
  );
}

/**
 * Gets a single known seo detail item by id.
 */
export const readSeoDetail = readSeoDetailItem;

/**
 * Read many seo detail items.
 */
export function updateSeoDetailItems<
  const Query extends Directus.Query<Schema, Collections.SeoDetail[]>,
>(
  keys: string[] | number[],
  patch: Partial<Collections.SeoDetail>,
  query?: Query,
) {
  return DirectusSDK.updateItems<Schema, "seo_detail", Query>(
    "seo_detail",
    keys,
    patch,
    query,
  );
}

/**
 * Gets a single known seo detail item by id.
 */
export function updateSeoDetailItem<
  const Query extends Directus.Query<Schema, Collections.SeoDetail[]>,
>(key: string | number, patch: Partial<Collections.SeoDetail>, query?: Query) {
  return DirectusSDK.updateItem<Schema, "seo_detail", Query>(
    "seo_detail",
    key,
    patch,
    query,
  );
}

/**
 * Deletes many seo detail items.
 */
export function deleteSeoDetailItems<
  const Query extends Directus.Query<Schema, Collections.SeoDetail[]>,
>(keys: string[] | number[]) {
  return DirectusSDK.deleteItems<Schema, "seo_detail", Query>(
    "seo_detail",
    keys,
  );
}

/**
 * Deletes a single known seo detail item by id.
 */
export function deleteSeoDetailItem(key: string | number) {
  return DirectusSDK.deleteItem<Schema, "seo_detail">("seo_detail", key);
}

export class SeoDetailItems
  implements TypedCollectionItemsWrapper<Collections.SeoDetail>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Creates many items in the collection.
   */
  async create<
    const Query extends DirectusSDK.Query<Schema, Collections.SeoDetail>,
  >(
    items: Partial<Collections.SeoDetail>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.SeoDetail,
      Query["fields"]
    >[]
  > {
    return (await this.client.request(
      createSeoDetailItems(items, query as any),
    )) as any; // Seems like a bug in the SDK.
  }

  /**
   * Read many items from the collection.
   */
  async query<
    const Query extends Directus.Query<Schema, Collections.SeoDetail>,
  >(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.SeoDetail,
      Query["fields"]
    >[]
  > {
    return await this.client.request(readSeoDetailItems(query));
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<const Query extends Directus.Query<Schema, Collections.SeoDetail>>(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.SeoDetail,
        Query["fields"]
      >
    | undefined
  > {
    const items = await this.client.request(
      readSeoDetailItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // TODO: fix
  }

  /**
   * Update many items in the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.SeoDetail[]>,
  >(
    keys: string[] | number[],
    patch: Partial<Collections.SeoDetail>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.SeoDetail,
      Query["fields"]
    >[]
  > {
    return await this.client.request(updateSeoDetailItems(keys, patch, query));
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.SeoDetail>,
  >(keys: string[] | number[]): Promise<void> {}
}

export class SeoDetailItem
  implements TypedCollectionItemWrapper<Collections.SeoDetail>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Create a single item in the collection.
   */
  async create<
    const Query extends Directus.Query<Schema, Collections.SeoDetail>,
  >(
    item: Partial<Collections.SeoDetail>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.SeoDetail, Query["fields"]>
  > {
    return (await this.client.request(
      createSeoDetailItem(item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<const Query extends Directus.Query<Schema, Collections.SeoDetail>>(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.SeoDetail,
        Query["fields"]
      >
    | undefined
  > {
    return await this.client.request(readSeoDetailItem(key, query));
  }

  /**
   * Update a single item from the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.SeoDetail>,
  >(
    key: string | number,
    patch: Partial<Collections.SeoDetail>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.SeoDetail,
        Query["fields"]
      >
    | undefined
  > {
    return (await this.client.request(
      updateSeoDetailItem(key, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.SeoDetail>,
  >(key: string | number): Promise<void> {
    return await this.client.request(deleteSeoDetailItem(key));
  }
}

/**
 * Create many seo redirection items.
 */
export function createSeoRedirectionItems<
  const Query extends Directus.Query<Schema, Collections.SeoRedirection[]>,
>(items: Partial<Collections.SeoRedirection>[], query?: Query) {
  return DirectusSDK.createItems<Schema, "seo_redirection", Query>(
    "seo_redirection",
    items,
    query,
  );
}

/**
 * Create a single seo redirection item.
 */
export function createSeoRedirectionItem<
  const Query extends DirectusSDK.Query<Schema, Collections.SeoRedirection[]>, // Is this a mistake? Why []?
>(item: Partial<Collections.SeoRedirection>, query?: Query) {
  return DirectusSDK.createItem<Schema, "seo_redirection", Query>(
    "seo_redirection",
    item,
    query,
  );
}

/**
 * Read many seo redirection items.
 */
export function readSeoRedirectionItems<
  const Query extends Directus.Query<Schema, Collections.SeoRedirection>,
>(query?: Query) {
  return DirectusSDK.readItems<Schema, "seo_redirection", Query>(
    "seo_redirection",
    query,
  );
}

/**
 * Read many seo redirection items.
 */
export const listSeoRedirection = readSeoRedirectionItems;

/**
 * Gets a single known seo redirection item by id.
 */
export function readSeoRedirectionItem<
  const Query extends Directus.Query<Schema, Collections.SeoRedirection>,
>(key: string | number, query?: Query) {
  return DirectusSDK.readItem<Schema, "seo_redirection", Query>(
    "seo_redirection",
    key,
    query,
  );
}

/**
 * Gets a single known seo redirection item by id.
 */
export const readSeoRedirection = readSeoRedirectionItem;

/**
 * Read many seo redirection items.
 */
export function updateSeoRedirectionItems<
  const Query extends Directus.Query<Schema, Collections.SeoRedirection[]>,
>(
  keys: string[] | number[],
  patch: Partial<Collections.SeoRedirection>,
  query?: Query,
) {
  return DirectusSDK.updateItems<Schema, "seo_redirection", Query>(
    "seo_redirection",
    keys,
    patch,
    query,
  );
}

/**
 * Gets a single known seo redirection item by id.
 */
export function updateSeoRedirectionItem<
  const Query extends Directus.Query<Schema, Collections.SeoRedirection[]>,
>(
  key: string | number,
  patch: Partial<Collections.SeoRedirection>,
  query?: Query,
) {
  return DirectusSDK.updateItem<Schema, "seo_redirection", Query>(
    "seo_redirection",
    key,
    patch,
    query,
  );
}

/**
 * Deletes many seo redirection items.
 */
export function deleteSeoRedirectionItems<
  const Query extends Directus.Query<Schema, Collections.SeoRedirection[]>,
>(keys: string[] | number[]) {
  return DirectusSDK.deleteItems<Schema, "seo_redirection", Query>(
    "seo_redirection",
    keys,
  );
}

/**
 * Deletes a single known seo redirection item by id.
 */
export function deleteSeoRedirectionItem(key: string | number) {
  return DirectusSDK.deleteItem<Schema, "seo_redirection">(
    "seo_redirection",
    key,
  );
}

export class SeoRedirectionItems
  implements TypedCollectionItemsWrapper<Collections.SeoRedirection>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Creates many items in the collection.
   */
  async create<
    const Query extends DirectusSDK.Query<Schema, Collections.SeoRedirection>,
  >(
    items: Partial<Collections.SeoRedirection>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.SeoRedirection,
      Query["fields"]
    >[]
  > {
    return (await this.client.request(
      createSeoRedirectionItems(items, query as any),
    )) as any; // Seems like a bug in the SDK.
  }

  /**
   * Read many items from the collection.
   */
  async query<
    const Query extends Directus.Query<Schema, Collections.SeoRedirection>,
  >(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.SeoRedirection,
      Query["fields"]
    >[]
  > {
    return await this.client.request(readSeoRedirectionItems(query));
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<
    const Query extends Directus.Query<Schema, Collections.SeoRedirection>,
  >(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.SeoRedirection,
        Query["fields"]
      >
    | undefined
  > {
    const items = await this.client.request(
      readSeoRedirectionItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // TODO: fix
  }

  /**
   * Update many items in the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.SeoRedirection[]>,
  >(
    keys: string[] | number[],
    patch: Partial<Collections.SeoRedirection>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.SeoRedirection,
      Query["fields"]
    >[]
  > {
    return await this.client.request(
      updateSeoRedirectionItems(keys, patch, query),
    );
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.SeoRedirection>,
  >(keys: string[] | number[]): Promise<void> {}
}

export class SeoRedirectionItem
  implements TypedCollectionItemWrapper<Collections.SeoRedirection>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Create a single item in the collection.
   */
  async create<
    const Query extends Directus.Query<Schema, Collections.SeoRedirection>,
  >(
    item: Partial<Collections.SeoRedirection>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.SeoRedirection,
      Query["fields"]
    >
  > {
    return (await this.client.request(
      createSeoRedirectionItem(item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<
    const Query extends Directus.Query<Schema, Collections.SeoRedirection>,
  >(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.SeoRedirection,
        Query["fields"]
      >
    | undefined
  > {
    return await this.client.request(readSeoRedirectionItem(key, query));
  }

  /**
   * Update a single item from the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.SeoRedirection>,
  >(
    key: string | number,
    patch: Partial<Collections.SeoRedirection>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.SeoRedirection,
        Query["fields"]
      >
    | undefined
  > {
    return (await this.client.request(
      updateSeoRedirectionItem(key, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.SeoRedirection>,
  >(key: string | number): Promise<void> {
    return await this.client.request(deleteSeoRedirectionItem(key));
  }
}

/**
 * Create many seo setting items.
 */
export function createSeoSettingItems<
  const Query extends Directus.Query<Schema, Collections.SeoSetting[]>,
>(items: Partial<Collections.SeoSetting>[], query?: Query) {
  return DirectusSDK.createItems<Schema, "seo_setting", Query>(
    "seo_setting",
    items,
    query,
  );
}

/**
 * Create a single seo setting item.
 */
export function createSeoSettingItem<
  const Query extends DirectusSDK.Query<Schema, Collections.SeoSetting[]>, // Is this a mistake? Why []?
>(item: Partial<Collections.SeoSetting>, query?: Query) {
  return DirectusSDK.createItem<Schema, "seo_setting", Query>(
    "seo_setting",
    item,
    query,
  );
}

/**
 * Read many seo setting items.
 */
export function readSeoSettingItems<
  const Query extends Directus.Query<Schema, Collections.SeoSetting>,
>(query?: Query) {
  return DirectusSDK.readItems<Schema, "seo_setting", Query>(
    "seo_setting",
    query,
  );
}

/**
 * Read many seo setting items.
 */
export const listSeoSetting = readSeoSettingItems;

/**
 * Gets a single known seo setting item by id.
 */
export function readSeoSettingItem<
  const Query extends Directus.Query<Schema, Collections.SeoSetting>,
>(key: string | number, query?: Query) {
  return DirectusSDK.readItem<Schema, "seo_setting", Query>(
    "seo_setting",
    key,
    query,
  );
}

/**
 * Gets a single known seo setting item by id.
 */
export const readSeoSetting = readSeoSettingItem;

/**
 * Read many seo setting items.
 */
export function updateSeoSettingItems<
  const Query extends Directus.Query<Schema, Collections.SeoSetting[]>,
>(
  keys: string[] | number[],
  patch: Partial<Collections.SeoSetting>,
  query?: Query,
) {
  return DirectusSDK.updateItems<Schema, "seo_setting", Query>(
    "seo_setting",
    keys,
    patch,
    query,
  );
}

/**
 * Gets a single known seo setting item by id.
 */
export function updateSeoSettingItem<
  const Query extends Directus.Query<Schema, Collections.SeoSetting[]>,
>(key: string | number, patch: Partial<Collections.SeoSetting>, query?: Query) {
  return DirectusSDK.updateItem<Schema, "seo_setting", Query>(
    "seo_setting",
    key,
    patch,
    query,
  );
}

/**
 * Deletes many seo setting items.
 */
export function deleteSeoSettingItems<
  const Query extends Directus.Query<Schema, Collections.SeoSetting[]>,
>(keys: string[] | number[]) {
  return DirectusSDK.deleteItems<Schema, "seo_setting", Query>(
    "seo_setting",
    keys,
  );
}

/**
 * Deletes a single known seo setting item by id.
 */
export function deleteSeoSettingItem(key: string | number) {
  return DirectusSDK.deleteItem<Schema, "seo_setting">("seo_setting", key);
}

export class SeoSettingItems
  implements TypedCollectionItemsWrapper<Collections.SeoSetting>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Creates many items in the collection.
   */
  async create<
    const Query extends DirectusSDK.Query<Schema, Collections.SeoSetting>,
  >(
    items: Partial<Collections.SeoSetting>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.SeoSetting,
      Query["fields"]
    >[]
  > {
    return (await this.client.request(
      createSeoSettingItems(items, query as any),
    )) as any; // Seems like a bug in the SDK.
  }

  /**
   * Read many items from the collection.
   */
  async query<
    const Query extends Directus.Query<Schema, Collections.SeoSetting>,
  >(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.SeoSetting,
      Query["fields"]
    >[]
  > {
    return await this.client.request(readSeoSettingItems(query));
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<
    const Query extends Directus.Query<Schema, Collections.SeoSetting>,
  >(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.SeoSetting,
        Query["fields"]
      >
    | undefined
  > {
    const items = await this.client.request(
      readSeoSettingItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // TODO: fix
  }

  /**
   * Update many items in the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.SeoSetting[]>,
  >(
    keys: string[] | number[],
    patch: Partial<Collections.SeoSetting>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.SeoSetting,
      Query["fields"]
    >[]
  > {
    return await this.client.request(updateSeoSettingItems(keys, patch, query));
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.SeoSetting>,
  >(keys: string[] | number[]): Promise<void> {}
}

export class SeoSettingItem
  implements TypedCollectionItemWrapper<Collections.SeoSetting>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Create a single item in the collection.
   */
  async create<
    const Query extends Directus.Query<Schema, Collections.SeoSetting>,
  >(
    item: Partial<Collections.SeoSetting>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.SeoSetting,
      Query["fields"]
    >
  > {
    return (await this.client.request(
      createSeoSettingItem(item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<const Query extends Directus.Query<Schema, Collections.SeoSetting>>(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.SeoSetting,
        Query["fields"]
      >
    | undefined
  > {
    return await this.client.request(readSeoSettingItem(key, query));
  }

  /**
   * Update a single item from the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.SeoSetting>,
  >(
    key: string | number,
    patch: Partial<Collections.SeoSetting>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.SeoSetting,
        Query["fields"]
      >
    | undefined
  > {
    return (await this.client.request(
      updateSeoSettingItem(key, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.SeoSetting>,
  >(key: string | number): Promise<void> {
    return await this.client.request(deleteSeoSettingItem(key));
  }
}

/**
 * Create many directus sync id map items.
 */
export function createDirectusSyncIdMapItems<
  const Query extends Directus.Query<Schema, Collections.DirectusSyncIdMap[]>,
>(items: Partial<Collections.DirectusSyncIdMap>[], query?: Query) {
  return DirectusSDK.createItems<Schema, "directus_sync_id_map", Query>(
    "directus_sync_id_map",
    items,
    query,
  );
}

/**
 * Create a single directus sync id map item.
 */
export function createDirectusSyncIdMapItem<
  const Query extends DirectusSDK.Query<
    Schema,
    Collections.DirectusSyncIdMap[]
  >, // Is this a mistake? Why []?
>(item: Partial<Collections.DirectusSyncIdMap>, query?: Query) {
  return DirectusSDK.createItem<Schema, "directus_sync_id_map", Query>(
    "directus_sync_id_map",
    item,
    query,
  );
}

/**
 * Read many directus sync id map items.
 */
export function readDirectusSyncIdMapItems<
  const Query extends Directus.Query<Schema, Collections.DirectusSyncIdMap>,
>(query?: Query) {
  return DirectusSDK.readItems<Schema, "directus_sync_id_map", Query>(
    "directus_sync_id_map",
    query,
  );
}

/**
 * Read many directus sync id map items.
 */
export const listDirectusSyncIdMap = readDirectusSyncIdMapItems;

/**
 * Gets a single known directus sync id map item by id.
 */
export function readDirectusSyncIdMapItem<
  const Query extends Directus.Query<Schema, Collections.DirectusSyncIdMap>,
>(key: string | number, query?: Query) {
  return DirectusSDK.readItem<Schema, "directus_sync_id_map", Query>(
    "directus_sync_id_map",
    key,
    query,
  );
}

/**
 * Gets a single known directus sync id map item by id.
 */
export const readDirectusSyncIdMap = readDirectusSyncIdMapItem;

/**
 * Read many directus sync id map items.
 */
export function updateDirectusSyncIdMapItems<
  const Query extends Directus.Query<Schema, Collections.DirectusSyncIdMap[]>,
>(
  keys: string[] | number[],
  patch: Partial<Collections.DirectusSyncIdMap>,
  query?: Query,
) {
  return DirectusSDK.updateItems<Schema, "directus_sync_id_map", Query>(
    "directus_sync_id_map",
    keys,
    patch,
    query,
  );
}

/**
 * Gets a single known directus sync id map item by id.
 */
export function updateDirectusSyncIdMapItem<
  const Query extends Directus.Query<Schema, Collections.DirectusSyncIdMap[]>,
>(
  key: string | number,
  patch: Partial<Collections.DirectusSyncIdMap>,
  query?: Query,
) {
  return DirectusSDK.updateItem<Schema, "directus_sync_id_map", Query>(
    "directus_sync_id_map",
    key,
    patch,
    query,
  );
}

/**
 * Deletes many directus sync id map items.
 */
export function deleteDirectusSyncIdMapItems<
  const Query extends Directus.Query<Schema, Collections.DirectusSyncIdMap[]>,
>(keys: string[] | number[]) {
  return DirectusSDK.deleteItems<Schema, "directus_sync_id_map", Query>(
    "directus_sync_id_map",
    keys,
  );
}

/**
 * Deletes a single known directus sync id map item by id.
 */
export function deleteDirectusSyncIdMapItem(key: string | number) {
  return DirectusSDK.deleteItem<Schema, "directus_sync_id_map">(
    "directus_sync_id_map",
    key,
  );
}

export class DirectusSyncIdMapItems
  implements TypedCollectionItemsWrapper<Collections.DirectusSyncIdMap>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Creates many items in the collection.
   */
  async create<
    const Query extends DirectusSDK.Query<
      Schema,
      Collections.DirectusSyncIdMap
    >,
  >(
    items: Partial<Collections.DirectusSyncIdMap>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.DirectusSyncIdMap,
      Query["fields"]
    >[]
  > {
    return (await this.client.request(
      createDirectusSyncIdMapItems(items, query as any),
    )) as any; // Seems like a bug in the SDK.
  }

  /**
   * Read many items from the collection.
   */
  async query<
    const Query extends Directus.Query<Schema, Collections.DirectusSyncIdMap>,
  >(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.DirectusSyncIdMap,
      Query["fields"]
    >[]
  > {
    return await this.client.request(readDirectusSyncIdMapItems(query));
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<
    const Query extends Directus.Query<Schema, Collections.DirectusSyncIdMap>,
  >(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.DirectusSyncIdMap,
        Query["fields"]
      >
    | undefined
  > {
    const items = await this.client.request(
      readDirectusSyncIdMapItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // TODO: fix
  }

  /**
   * Update many items in the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.DirectusSyncIdMap[]>,
  >(
    keys: string[] | number[],
    patch: Partial<Collections.DirectusSyncIdMap>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.DirectusSyncIdMap,
      Query["fields"]
    >[]
  > {
    return await this.client.request(
      updateDirectusSyncIdMapItems(keys, patch, query),
    );
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.DirectusSyncIdMap>,
  >(keys: string[] | number[]): Promise<void> {}
}

export class DirectusSyncIdMapItem
  implements TypedCollectionItemWrapper<Collections.DirectusSyncIdMap>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Create a single item in the collection.
   */
  async create<
    const Query extends Directus.Query<Schema, Collections.DirectusSyncIdMap>,
  >(
    item: Partial<Collections.DirectusSyncIdMap>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.DirectusSyncIdMap,
      Query["fields"]
    >
  > {
    return (await this.client.request(
      createDirectusSyncIdMapItem(item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<
    const Query extends Directus.Query<Schema, Collections.DirectusSyncIdMap>,
  >(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.DirectusSyncIdMap,
        Query["fields"]
      >
    | undefined
  > {
    return await this.client.request(readDirectusSyncIdMapItem(key, query));
  }

  /**
   * Update a single item from the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.DirectusSyncIdMap>,
  >(
    key: string | number,
    patch: Partial<Collections.DirectusSyncIdMap>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.DirectusSyncIdMap,
        Query["fields"]
      >
    | undefined
  > {
    return (await this.client.request(
      updateDirectusSyncIdMapItem(key, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.DirectusSyncIdMap>,
  >(key: string | number): Promise<void> {
    return await this.client.request(deleteDirectusSyncIdMapItem(key));
  }
}

/**
 * The Directus Client.
 */

export type DirectusRestCommands<T extends Record<any, any>> = keyof {
  [K in keyof T as T[K] extends (
    ...any: any[]
  ) => Directus.RestCommand<any, any>
    ? K
    : never]: K;
};

export type TypedClient = {
  /**
   * Manages multiple items from the Button collection.
   */
  buttons: TypedCollectionItemsWrapper<Collections.Button>;

  /**
   * Manages individual items from the Button collection.
   */
  button: TypedCollectionItemWrapper<Collections.Button>;

  /**
   * Manages multiple items from the ContactForms collection.
   */
  contact_forms: TypedCollectionItemsWrapper<Collections.ContactForms>;

  /**
   * Manages individual items from the ContactForms collection.
   */
  contact_form: TypedCollectionItemWrapper<Collections.ContactForms>;

  /**
   * Manages multiple items from the Gallery collection.
   */
  galleries: TypedCollectionItemsWrapper<Collections.Gallery>;

  /**
   * Manages individual items from the Gallery collection.
   */
  gallery: TypedCollectionItemWrapper<Collections.Gallery>;

  /**
   * Manages multiple items from the GalleryFiles collection.
   */
  gallery_files: TypedCollectionItemsWrapper<Collections.GalleryFiles>;

  /**
   * Manages individual items from the GalleryFiles collection.
   */
  gallery_file: TypedCollectionItemWrapper<Collections.GalleryFiles>;

  /**
   * Fetches the only Homepage instance available.
   */
  ["homepage"]<
    const Query extends Directus.Query<Schema, Collections.Homepage>,
  >(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Homepage, Query["fields"]>
  >;

  /**
   * Manages multiple items from the Image collection.
   */
  images: TypedCollectionItemsWrapper<Collections.Image>;

  /**
   * Manages individual items from the Image collection.
   */
  image: TypedCollectionItemWrapper<Collections.Image>;

  /**
   * Manages multiple items from the MenuItems collection.
   */
  menu_items: TypedCollectionItemsWrapper<Collections.MenuItems>;

  /**
   * Manages individual items from the MenuItems collection.
   */
  menu_item: TypedCollectionItemWrapper<Collections.MenuItems>;

  /**
   * Manages multiple items from the Menus collection.
   */
  menus: TypedCollectionItemsWrapper<Collections.Menus>;

  /**
   * Manages individual items from the Menus collection.
   */
  menu: TypedCollectionItemWrapper<Collections.Menus>;

  /**
   * Manages multiple items from the Pages collection.
   */
  pages: TypedCollectionItemsWrapper<Collections.Pages>;

  /**
   * Manages individual items from the Pages collection.
   */
  page: TypedCollectionItemWrapper<Collections.Pages>;

  /**
   * Manages multiple items from the PagesEditorNodes collection.
   */
  pages_editor_nodes: TypedCollectionItemsWrapper<Collections.PagesEditorNodes>;

  /**
   * Manages individual items from the PagesEditorNodes collection.
   */
  pages_editor_node: TypedCollectionItemWrapper<Collections.PagesEditorNodes>;

  /**
   * Manages multiple items from the Quote collection.
   */
  quotes: TypedCollectionItemsWrapper<Collections.Quote>;

  /**
   * Manages individual items from the Quote collection.
   */
  quote: TypedCollectionItemWrapper<Collections.Quote>;

  /**
   * Manages multiple items from the Section collection.
   */
  sections: TypedCollectionItemsWrapper<Collections.Section>;

  /**
   * Manages individual items from the Section collection.
   */
  section: TypedCollectionItemWrapper<Collections.Section>;

  /**
   * Manages multiple items from the SectionEditorNodes collection.
   */
  section_editor_nodes: TypedCollectionItemsWrapper<Collections.SectionEditorNodes>;

  /**
   * Manages individual items from the SectionEditorNodes collection.
   */
  section_editor_node: TypedCollectionItemWrapper<Collections.SectionEditorNodes>;

  /**
   * Manages multiple items from the SeoAdvancedSetting collection.
   */
  seo_advanced_settings: TypedCollectionItemsWrapper<Collections.SeoAdvancedSetting>;

  /**
   * Manages individual items from the SeoAdvancedSetting collection.
   */
  seo_advanced_setting: TypedCollectionItemWrapper<Collections.SeoAdvancedSetting>;

  /**
   * Manages multiple items from the SeoDetail collection.
   */
  seo_details: TypedCollectionItemsWrapper<Collections.SeoDetail>;

  /**
   * Manages individual items from the SeoDetail collection.
   */
  seo_detail: TypedCollectionItemWrapper<Collections.SeoDetail>;

  /**
   * Manages multiple items from the SeoRedirection collection.
   */
  seo_redirections: TypedCollectionItemsWrapper<Collections.SeoRedirection>;

  /**
   * Manages individual items from the SeoRedirection collection.
   */
  seo_redirection: TypedCollectionItemWrapper<Collections.SeoRedirection>;

  /**
   * Manages multiple items from the SeoSetting collection.
   */
  seo_settings: TypedCollectionItemsWrapper<Collections.SeoSetting>;

  /**
   * Manages individual items from the SeoSetting collection.
   */
  seo_setting: TypedCollectionItemWrapper<Collections.SeoSetting>;

  /**
   * Manages multiple items from the DirectusSyncIdMap collection.
   */
  directus_sync_id_maps: TypedCollectionItemsWrapper<Collections.DirectusSyncIdMap>;

  /**
   * Manages individual items from the DirectusSyncIdMap collection.
   */
  directus_sync_id_map: TypedCollectionItemWrapper<Collections.DirectusSyncIdMap>;
} & DirectusCommands;

type ExcludedDirectusCommands = "withOptions" | "withToken" | "withSearch";

/**
 * This is almost a sanity check for protecting against breaking changes in the SDK.
 * If this is erroring for you, the SDK probably changed and there's an update needed.
 */

const excludedDirectusCommands: {
  [K in keyof Omit<
    DirectusSDK,
    Exclude<keyof DirectusCommands, ExcludedDirectusCommands>
  >]: true;
} = {
  ["auth"]: true,
  ["authentication"]: true,
  ["createDirectus"]: true,
  ["rest"]: true,
  ["formatFields"]: true,
  ["generateUid"]: true,
  ["getAuthEndpoint"]: true,
  ["graphql"]: true,
  ["memoryStorage"]: true,
  ["messageCallback"]: true,
  ["pong"]: true,
  ["queryToParams"]: true,
  ["realtime"]: true,
  ["sleep"]: true,
  ["staticToken"]: true,
  ["throwIfCoreCollection"]: true,
  ["throwIfEmpty"]: true,
  ["withOptions"]: true,
  ["withToken"]: true,
  ["withSearch"]: true,
} as const;

type _InjectSchemaSystemTypes<T, Schema> =
  T extends Directus.Query<any, infer C>
    ? Directus.Query<Schema, C>
    : T extends Directus.DirectusActivity<any>
      ? Directus.DirectusActivity<Schema>
      : T extends Directus.DirectusCollection<any>
        ? Directus.DirectusCollection<Schema>
        : T extends Directus.DirectusField<any>
          ? Directus.DirectusField<Schema>
          : T extends Directus.DirectusFile<any>
            ? Directus.DirectusFile<Schema>
            : T extends Directus.DirectusFolder<any>
              ? Directus.DirectusFolder<Schema>
              : T extends Directus.DirectusPermission<any>
                ? Directus.DirectusPermission<Schema>
                : T extends Directus.DirectusPreset<any>
                  ? Directus.DirectusPreset<Schema>
                  : T extends Directus.DirectusRelation<any>
                    ? Directus.DirectusRelation<Schema>
                    : T extends Directus.DirectusRevision<any>
                      ? Directus.DirectusRevision<Schema>
                      : T extends Directus.DirectusRole<any>
                        ? Directus.DirectusRole<Schema>
                        : T extends Directus.DirectusSettings<any>
                          ? Directus.DirectusSettings<Schema>
                          : T extends Directus.DirectusUser<any>
                            ? Directus.DirectusUser<Schema>
                            : T extends Directus.DirectusWebhook<any>
                              ? Directus.DirectusWebhook<Schema>
                              : T extends Directus.DirectusDashboard<any>
                                ? Directus.DirectusDashboard<Schema>
                                : T extends Directus.DirectusPanel<any>
                                  ? Directus.DirectusPanel<Schema>
                                  : T extends Directus.DirectusNotification<any>
                                    ? Directus.DirectusNotification<Schema>
                                    : T extends Directus.DirectusShare<any>
                                      ? Directus.DirectusShare<Schema>
                                      : T extends Directus.DirectusFlow<any>
                                        ? Directus.DirectusFlow<Schema>
                                        : T extends Directus.DirectusOperation<any>
                                          ? Directus.DirectusOperation<Schema>
                                          : T extends Directus.DirectusTranslation<any>
                                            ? Directus.DirectusTranslation<Schema>
                                            : T extends Directus.DirectusVersion<any>
                                              ? Directus.DirectusVersion<Schema>
                                              : T extends Directus.DirectusExtension<any>
                                                ? Directus.DirectusExtension<Schema>
                                                : T extends Directus.DirectusUser<any>
                                                  ? Directus.DirectusUser<Schema>
                                                  : T;

type InjectSchemaSystemTypes<T, Schema> =
  T extends Partial<infer Nested>
    ? Partial<_InjectSchemaSystemTypes<Nested, Schema>>
    : _InjectSchemaSystemTypes<T, Schema>;

type InjectSchema<T, Schema> = T extends []
  ? []
  : T extends [infer Param]
    ? [InjectSchema<Param, Schema>]
    : T extends [infer Param, ...infer Rest]
      ? [InjectSchema<Param, Schema>, ...InjectSchema<Rest, Schema>]
      : InjectSchemaSystemTypes<T, Schema>;

export type DirectusCommands = {
  [K in DirectusRestCommands<DirectusSDK>]: (
    ...args: InjectSchema<Parameters<DirectusSDK[K]>, Schema>
  ) => Promise<
    ReturnType<DirectusSDK[K]> extends Directus.RestCommand<infer Output, any>
      ? Output
      : unknown
  >;
};

function isDirectusRestCommand(
  pair: [any, any],
): pair is [string, (...args: any[]) => Directus.RestCommand<any, any>] {
  return (
    !((pair?.[0] as any) in excludedDirectusCommands) &&
    typeof pair?.[1] === "function"
  );
}

function isDirectusRestClient<Schema>(
  client: DirectusSDK.DirectusClient<Schema>,
): client is DirectusSDK.DirectusClient<Schema> &
  DirectusSDK.RestClient<Schema> {
  return client && "request" in client;
}

export const schema = () => {
  return <Schema,>(client: Directus.DirectusClient<Schema>): TypedClient => {
    if (!isDirectusRestClient(client)) {
      throw new Error("Directus client must have the REST plugin enabled.");
    }

    return Object.fromEntries([
      ...Object.entries(DirectusSDK)
        .filter(isDirectusRestCommand)
        .map(([key, value]) => {
          return [
            key,
            (...args: any[]): any => {
              return client.request(value(...args));
            },
          ];
        }),

      ["buttons", new ButtonItems(client as any)],
      ["button", new ButtonItem(client as any)],

      ["contact_forms", new ContactFormsItems(client as any)],
      ["contact_form", new ContactFormsItem(client as any)],

      ["galleries", new GalleryItems(client as any)],
      ["gallery", new GalleryItem(client as any)],

      ["gallery_files", new GalleryFilesItems(client as any)],
      ["gallery_file", new GalleryFilesItem(client as any)],

      [
        "homepage",
        (query: any) => {
          return client.request(readHomepage(query));
        },
      ],

      ["images", new ImageItems(client as any)],
      ["image", new ImageItem(client as any)],

      ["menu_items", new MenuItemsItems(client as any)],
      ["menu_item", new MenuItemsItem(client as any)],

      ["menus", new MenusItems(client as any)],
      ["menu", new MenusItem(client as any)],

      ["pages", new PagesItems(client as any)],
      ["page", new PagesItem(client as any)],

      ["pages_editor_nodes", new PagesEditorNodesItems(client as any)],
      ["pages_editor_node", new PagesEditorNodesItem(client as any)],

      ["quotes", new QuoteItems(client as any)],
      ["quote", new QuoteItem(client as any)],

      ["sections", new SectionItems(client as any)],
      ["section", new SectionItem(client as any)],

      ["section_editor_nodes", new SectionEditorNodesItems(client as any)],
      ["section_editor_node", new SectionEditorNodesItem(client as any)],

      ["seo_advanced_settings", new SeoAdvancedSettingItems(client as any)],
      ["seo_advanced_setting", new SeoAdvancedSettingItem(client as any)],

      ["seo_details", new SeoDetailItems(client as any)],
      ["seo_detail", new SeoDetailItem(client as any)],

      ["seo_redirections", new SeoRedirectionItems(client as any)],
      ["seo_redirection", new SeoRedirectionItem(client as any)],

      ["seo_settings", new SeoSettingItems(client as any)],
      ["seo_setting", new SeoSettingItem(client as any)],

      ["directus_sync_id_maps", new DirectusSyncIdMapItems(client as any)],
      ["directus_sync_id_map", new DirectusSyncIdMapItem(client as any)],
    ]);
  };
};

export interface BindableClient {
  with: <
    Client extends DirectusSDK.DirectusClient<any>,
    Extension extends object,
  >(
    createExtension: (client: Client) => Extension,
  ) => this & Extension;
}

export const bindings = () => {
  return <Schema, Client extends DirectusSDK.DirectusClient<Schema>>(
    client: Client,
  ): BindableClient => {
    return {
      with(createExtension: any) {
        const extension = createExtension(this);
        const extensions = Object.entries(
          extension,
        ).reduce<PropertyDescriptorMap>((properties, [name, value]) => {
          return {
            ...properties,
            [name]: {
              value,
              configurable: true,
              writable: true,
              enumerable: true,
            },
          };
        }, {});

        Object.defineProperties(this, extensions);

        return this;
      },
    } as any;
  };
};

export function createDirectusWithTypes(
  url: string,
): Directus.DirectusClient<Schema> & Directus.RestClient<Schema> & TypedClient {
  return DirectusSDK.createDirectus<Schema>(url)
    .with(bindings())
    .with(DirectusSDK.rest())
    .with(schema());
}

export const createTypedClient = createDirectusWithTypes;
