type Query {
  directus_sync_id_map(filter: directus_sync_id_map_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_sync_id_map!]!
  directus_sync_id_map_by_id(id: ID!, version: String): directus_sync_id_map
  directus_sync_id_map_aggregated(groupBy: [String], filter: directus_sync_id_map_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [directus_sync_id_map_aggregated!]!
  directus_sync_id_map_by_version(version: String!, id: ID!): version_directus_sync_id_map
  pages(filter: pages_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [pages!]!
  pages_by_id(id: ID!, version: String): pages
  pages_aggregated(groupBy: [String], filter: pages_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [pages_aggregated!]!
  pages_by_version(version: String!, id: ID!): version_pages
  homepage(version: String): homepage
  homepage_by_version(version: String!): version_homepage
  section_editor_nodes(filter: section_editor_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [section_editor_nodes!]!
  section_editor_nodes_by_id(id: ID!, version: String): section_editor_nodes
  section_editor_nodes_aggregated(groupBy: [String], filter: section_editor_nodes_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [section_editor_nodes_aggregated!]!
  section_editor_nodes_by_version(version: String!, id: ID!): version_section_editor_nodes
  quote(filter: quote_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [quote!]!
  quote_by_id(id: ID!, version: String): quote
  quote_aggregated(groupBy: [String], filter: quote_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [quote_aggregated!]!
  quote_by_version(version: String!, id: ID!): version_quote
  pages_editor_nodes(filter: pages_editor_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [pages_editor_nodes!]!
  pages_editor_nodes_by_id(id: ID!, version: String): pages_editor_nodes
  pages_editor_nodes_aggregated(groupBy: [String], filter: pages_editor_nodes_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [pages_editor_nodes_aggregated!]!
  pages_editor_nodes_by_version(version: String!, id: ID!): version_pages_editor_nodes
  image(filter: image_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [image!]!
  image_by_id(id: ID!, version: String): image
  image_aggregated(groupBy: [String], filter: image_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [image_aggregated!]!
  image_by_version(version: String!, id: ID!): version_image
  gallery_files(filter: gallery_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [gallery_files!]!
  gallery_files_by_id(id: ID!, version: String): gallery_files
  gallery_files_aggregated(groupBy: [String], filter: gallery_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [gallery_files_aggregated!]!
  gallery_files_by_version(version: String!, id: ID!): version_gallery_files
  gallery(filter: gallery_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [gallery!]!
  gallery_by_id(id: ID!, version: String): gallery
  gallery_aggregated(groupBy: [String], filter: gallery_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [gallery_aggregated!]!
  gallery_by_version(version: String!, id: ID!): version_gallery
  seo_setting(filter: seo_setting_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [seo_setting!]!
  seo_setting_by_id(id: ID!, version: String): seo_setting
  seo_setting_aggregated(groupBy: [String], filter: seo_setting_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [seo_setting_aggregated!]!
  seo_setting_by_version(version: String!, id: ID!): version_seo_setting
  seo_redirection(filter: seo_redirection_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [seo_redirection!]!
  seo_redirection_by_id(id: ID!, version: String): seo_redirection
  seo_redirection_aggregated(groupBy: [String], filter: seo_redirection_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [seo_redirection_aggregated!]!
  seo_redirection_by_version(version: String!, id: ID!): version_seo_redirection
  seo_advanced_setting(filter: seo_advanced_setting_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [seo_advanced_setting!]!
  seo_advanced_setting_by_id(id: ID!, version: String): seo_advanced_setting
  seo_advanced_setting_aggregated(groupBy: [String], filter: seo_advanced_setting_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [seo_advanced_setting_aggregated!]!
  seo_advanced_setting_by_version(version: String!, id: ID!): version_seo_advanced_setting
  seo_detail(filter: seo_detail_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [seo_detail!]!
  seo_detail_by_id(id: ID!, version: String): seo_detail
  seo_detail_aggregated(groupBy: [String], filter: seo_detail_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [seo_detail_aggregated!]!
  seo_detail_by_version(version: String!, id: ID!): version_seo_detail
  section(filter: section_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [section!]!
  section_by_id(id: ID!, version: String): section
  section_aggregated(groupBy: [String], filter: section_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [section_aggregated!]!
  section_by_version(version: String!, id: ID!): version_section
  menus(filter: menus_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [menus!]!
  menus_by_id(id: ID!, version: String): menus
  menus_aggregated(groupBy: [String], filter: menus_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [menus_aggregated!]!
  menus_by_version(version: String!, id: ID!): version_menus
  menu_items(filter: menu_items_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [menu_items!]!
  menu_items_by_id(id: ID!, version: String): menu_items
  menu_items_aggregated(groupBy: [String], filter: menu_items_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [menu_items_aggregated!]!
  menu_items_by_version(version: String!, id: ID!): version_menu_items
  button(filter: button_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [button!]!
  button_by_id(id: ID!, version: String): button
  button_aggregated(groupBy: [String], filter: button_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [button_aggregated!]!
  button_by_version(version: String!, id: ID!): version_button
  contact_forms(filter: contact_forms_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [contact_forms!]!
  contact_forms_by_id(id: ID!, version: String): contact_forms
  contact_forms_aggregated(groupBy: [String], filter: contact_forms_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [contact_forms_aggregated!]!
  contact_forms_by_version(version: String!, id: ID!): version_contact_forms
}

type Mutation {
  create_directus_sync_id_map_items(filter: directus_sync_id_map_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_directus_sync_id_map_input!]): [directus_sync_id_map!]!
  create_directus_sync_id_map_item(data: create_directus_sync_id_map_input!): directus_sync_id_map
  create_pages_items(filter: pages_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_pages_input!]): [pages!]!
  create_pages_item(data: create_pages_input!): pages
  create_section_editor_nodes_items(filter: section_editor_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_section_editor_nodes_input!]): [section_editor_nodes!]!
  create_section_editor_nodes_item(data: create_section_editor_nodes_input!): section_editor_nodes
  create_quote_items(filter: quote_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_quote_input!]): [quote!]!
  create_quote_item(data: create_quote_input!): quote
  create_pages_editor_nodes_items(filter: pages_editor_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_pages_editor_nodes_input!]): [pages_editor_nodes!]!
  create_pages_editor_nodes_item(data: create_pages_editor_nodes_input!): pages_editor_nodes
  create_image_items(filter: image_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_image_input!]): [image!]!
  create_image_item(data: create_image_input!): image
  create_gallery_files_items(filter: gallery_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_gallery_files_input!]): [gallery_files!]!
  create_gallery_files_item(data: create_gallery_files_input!): gallery_files
  create_gallery_items(filter: gallery_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_gallery_input!]): [gallery!]!
  create_gallery_item(data: create_gallery_input!): gallery
  create_seo_setting_items(filter: seo_setting_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_seo_setting_input!]): [seo_setting!]!
  create_seo_setting_item(data: create_seo_setting_input!): seo_setting
  create_seo_redirection_items(filter: seo_redirection_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_seo_redirection_input!]): [seo_redirection!]!
  create_seo_redirection_item(data: create_seo_redirection_input!): seo_redirection
  create_seo_advanced_setting_items(filter: seo_advanced_setting_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_seo_advanced_setting_input!]): [seo_advanced_setting!]!
  create_seo_advanced_setting_item(data: create_seo_advanced_setting_input!): seo_advanced_setting
  create_seo_detail_items(filter: seo_detail_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_seo_detail_input!]): [seo_detail!]!
  create_seo_detail_item(data: create_seo_detail_input!): seo_detail
  create_section_items(filter: section_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_section_input!]): [section!]!
  create_section_item(data: create_section_input!): section
  create_menus_items(filter: menus_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_menus_input!]): [menus!]!
  create_menus_item(data: create_menus_input!): menus
  create_menu_items_items(filter: menu_items_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_menu_items_input!]): [menu_items!]!
  create_menu_items_item(data: create_menu_items_input!): menu_items
  create_button_items(filter: button_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_button_input!]): [button!]!
  create_button_item(data: create_button_input!): button
  create_contact_forms_items(filter: contact_forms_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_contact_forms_input!]): [contact_forms!]!
  create_contact_forms_item(data: create_contact_forms_input!): contact_forms
  update_directus_sync_id_map_items(filter: directus_sync_id_map_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_directus_sync_id_map_input!): [directus_sync_id_map!]!
  update_directus_sync_id_map_batch(filter: directus_sync_id_map_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_directus_sync_id_map_input!]): [directus_sync_id_map!]!
  update_directus_sync_id_map_item(id: ID!, data: update_directus_sync_id_map_input!): directus_sync_id_map
  update_pages_items(filter: pages_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_pages_input!): [pages!]!
  update_pages_batch(filter: pages_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_pages_input!]): [pages!]!
  update_pages_item(id: ID!, data: update_pages_input!): pages
  update_homepage(data: update_homepage_input!): homepage
  update_section_editor_nodes_items(filter: section_editor_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_section_editor_nodes_input!): [section_editor_nodes!]!
  update_section_editor_nodes_batch(filter: section_editor_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_section_editor_nodes_input!]): [section_editor_nodes!]!
  update_section_editor_nodes_item(id: ID!, data: update_section_editor_nodes_input!): section_editor_nodes
  update_quote_items(filter: quote_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_quote_input!): [quote!]!
  update_quote_batch(filter: quote_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_quote_input!]): [quote!]!
  update_quote_item(id: ID!, data: update_quote_input!): quote
  update_pages_editor_nodes_items(filter: pages_editor_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_pages_editor_nodes_input!): [pages_editor_nodes!]!
  update_pages_editor_nodes_batch(filter: pages_editor_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_pages_editor_nodes_input!]): [pages_editor_nodes!]!
  update_pages_editor_nodes_item(id: ID!, data: update_pages_editor_nodes_input!): pages_editor_nodes
  update_image_items(filter: image_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_image_input!): [image!]!
  update_image_batch(filter: image_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_image_input!]): [image!]!
  update_image_item(id: ID!, data: update_image_input!): image
  update_gallery_files_items(filter: gallery_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_gallery_files_input!): [gallery_files!]!
  update_gallery_files_batch(filter: gallery_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_gallery_files_input!]): [gallery_files!]!
  update_gallery_files_item(id: ID!, data: update_gallery_files_input!): gallery_files
  update_gallery_items(filter: gallery_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_gallery_input!): [gallery!]!
  update_gallery_batch(filter: gallery_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_gallery_input!]): [gallery!]!
  update_gallery_item(id: ID!, data: update_gallery_input!): gallery
  update_seo_setting_items(filter: seo_setting_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_seo_setting_input!): [seo_setting!]!
  update_seo_setting_batch(filter: seo_setting_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_seo_setting_input!]): [seo_setting!]!
  update_seo_setting_item(id: ID!, data: update_seo_setting_input!): seo_setting
  update_seo_redirection_items(filter: seo_redirection_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_seo_redirection_input!): [seo_redirection!]!
  update_seo_redirection_batch(filter: seo_redirection_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_seo_redirection_input!]): [seo_redirection!]!
  update_seo_redirection_item(id: ID!, data: update_seo_redirection_input!): seo_redirection
  update_seo_advanced_setting_items(filter: seo_advanced_setting_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_seo_advanced_setting_input!): [seo_advanced_setting!]!
  update_seo_advanced_setting_batch(filter: seo_advanced_setting_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_seo_advanced_setting_input!]): [seo_advanced_setting!]!
  update_seo_advanced_setting_item(id: ID!, data: update_seo_advanced_setting_input!): seo_advanced_setting
  update_seo_detail_items(filter: seo_detail_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_seo_detail_input!): [seo_detail!]!
  update_seo_detail_batch(filter: seo_detail_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_seo_detail_input!]): [seo_detail!]!
  update_seo_detail_item(id: ID!, data: update_seo_detail_input!): seo_detail
  update_section_items(filter: section_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_section_input!): [section!]!
  update_section_batch(filter: section_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_section_input!]): [section!]!
  update_section_item(id: ID!, data: update_section_input!): section
  update_menus_items(filter: menus_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_menus_input!): [menus!]!
  update_menus_batch(filter: menus_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_menus_input!]): [menus!]!
  update_menus_item(id: ID!, data: update_menus_input!): menus
  update_menu_items_items(filter: menu_items_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_menu_items_input!): [menu_items!]!
  update_menu_items_batch(filter: menu_items_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_menu_items_input!]): [menu_items!]!
  update_menu_items_item(id: ID!, data: update_menu_items_input!): menu_items
  update_button_items(filter: button_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_button_input!): [button!]!
  update_button_batch(filter: button_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_button_input!]): [button!]!
  update_button_item(id: ID!, data: update_button_input!): button
  update_contact_forms_items(filter: contact_forms_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_contact_forms_input!): [contact_forms!]!
  update_contact_forms_batch(filter: contact_forms_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_contact_forms_input!]): [contact_forms!]!
  update_contact_forms_item(id: ID!, data: update_contact_forms_input!): contact_forms
  delete_directus_sync_id_map_items(ids: [ID]!): delete_many
  delete_directus_sync_id_map_item(id: ID!): delete_one
  delete_pages_items(ids: [ID]!): delete_many
  delete_pages_item(id: ID!): delete_one
  delete_section_editor_nodes_items(ids: [ID]!): delete_many
  delete_section_editor_nodes_item(id: ID!): delete_one
  delete_quote_items(ids: [ID]!): delete_many
  delete_quote_item(id: ID!): delete_one
  delete_pages_editor_nodes_items(ids: [ID]!): delete_many
  delete_pages_editor_nodes_item(id: ID!): delete_one
  delete_image_items(ids: [ID]!): delete_many
  delete_image_item(id: ID!): delete_one
  delete_gallery_files_items(ids: [ID]!): delete_many
  delete_gallery_files_item(id: ID!): delete_one
  delete_gallery_items(ids: [ID]!): delete_many
  delete_gallery_item(id: ID!): delete_one
  delete_seo_setting_items(ids: [ID]!): delete_many
  delete_seo_setting_item(id: ID!): delete_one
  delete_seo_redirection_items(ids: [ID]!): delete_many
  delete_seo_redirection_item(id: ID!): delete_one
  delete_seo_advanced_setting_items(ids: [ID]!): delete_many
  delete_seo_advanced_setting_item(id: ID!): delete_one
  delete_seo_detail_items(ids: [ID]!): delete_many
  delete_seo_detail_item(id: ID!): delete_one
  delete_section_items(ids: [ID]!): delete_many
  delete_section_item(id: ID!): delete_one
  delete_menus_items(ids: [ID]!): delete_many
  delete_menus_item(id: ID!): delete_one
  delete_menu_items_items(ids: [ID]!): delete_many
  delete_menu_items_item(id: ID!): delete_one
  delete_button_items(ids: [ID]!): delete_many
  delete_button_item(id: ID!): delete_one
  delete_contact_forms_items(ids: [ID]!): delete_many
  delete_contact_forms_item(id: ID!): delete_one
}

type Subscription {
  directus_activity_mutated(event: EventEnum): directus_activity_mutated
  directus_roles_mutated(event: EventEnum): directus_roles_mutated
  directus_files_mutated(event: EventEnum): directus_files_mutated
  directus_folders_mutated(event: EventEnum): directus_folders_mutated
  directus_permissions_mutated(event: EventEnum): directus_permissions_mutated
  directus_presets_mutated(event: EventEnum): directus_presets_mutated
  directus_users_mutated(event: EventEnum): directus_users_mutated
  directus_revisions_mutated(event: EventEnum): directus_revisions_mutated
  directus_settings_mutated(event: EventEnum): directus_settings_mutated
  directus_webhooks_mutated(event: EventEnum): directus_webhooks_mutated
  directus_panels_mutated(event: EventEnum): directus_panels_mutated
  directus_notifications_mutated(event: EventEnum): directus_notifications_mutated
  directus_shares_mutated(event: EventEnum): directus_shares_mutated
  directus_flows_mutated(event: EventEnum): directus_flows_mutated
  directus_operations_mutated(event: EventEnum): directus_operations_mutated
  directus_dashboards_mutated(event: EventEnum): directus_dashboards_mutated
  directus_translations_mutated(event: EventEnum): directus_translations_mutated
  directus_versions_mutated(event: EventEnum): directus_versions_mutated
  directus_sync_id_map_mutated(event: EventEnum): directus_sync_id_map_mutated
  pages_mutated(event: EventEnum): pages_mutated
  homepage_mutated(event: EventEnum): homepage_mutated
  section_editor_nodes_mutated(event: EventEnum): section_editor_nodes_mutated
  quote_mutated(event: EventEnum): quote_mutated
  pages_editor_nodes_mutated(event: EventEnum): pages_editor_nodes_mutated
  image_mutated(event: EventEnum): image_mutated
  gallery_files_mutated(event: EventEnum): gallery_files_mutated
  gallery_mutated(event: EventEnum): gallery_mutated
  seo_setting_mutated(event: EventEnum): seo_setting_mutated
  seo_redirection_mutated(event: EventEnum): seo_redirection_mutated
  seo_advanced_setting_mutated(event: EventEnum): seo_advanced_setting_mutated
  seo_detail_mutated(event: EventEnum): seo_detail_mutated
  section_mutated(event: EventEnum): section_mutated
  menus_mutated(event: EventEnum): menus_mutated
  menu_items_mutated(event: EventEnum): menu_items_mutated
  button_mutated(event: EventEnum): button_mutated
  contact_forms_mutated(event: EventEnum): contact_forms_mutated
}

"""The `Boolean` scalar type represents `true` or `false`."""
scalar Boolean

"""ISO8601 Date values"""
scalar Date

"""
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
"""
scalar Float

"""BigInt value"""
scalar GraphQLBigInt

"""A Float or a String"""
scalar GraphQLStringOrFloat

"""Hashed string values"""
scalar Hash

"""
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
"""
scalar ID

"""
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
"""
scalar Int

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
"""
scalar String

enum EventEnum {
  create
  update
  delete
}

union pages_editor_nodes_item_union = section

union section_editor_nodes_item_union = image | gallery | quote | button

type button {
  id: ID!
  label: String!
  size: String
  variant: String
  type: String
  url: String
  page(filter: pages_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): pages
  new_tab: Boolean
}

type button_aggregated {
  group: JSON
  countAll: Int
  count: button_aggregated_count
  countDistinct: button_aggregated_count
}

type button_aggregated_count {
  id: Int
  label: Int
  size: Int
  variant: Int
  type: Int
  url: Int
  page: Int
  new_tab: Int
}

type button_mutated {
  key: ID!
  event: EventEnum
  data: button
}

type contact_forms {
  id: ID!
  sort: Int
  date_created: Date
  date_created_func: datetime_functions
  name: String
  email: String
  message: String
}

type contact_forms_aggregated {
  group: JSON
  countAll: Int
  count: contact_forms_aggregated_count
  countDistinct: contact_forms_aggregated_count
  avg: contact_forms_aggregated_fields
  sum: contact_forms_aggregated_fields
  avgDistinct: contact_forms_aggregated_fields
  sumDistinct: contact_forms_aggregated_fields
  min: contact_forms_aggregated_fields
  max: contact_forms_aggregated_fields
}

type contact_forms_aggregated_count {
  id: Int
  sort: Int
  date_created: Int
  name: Int
  email: Int
  message: Int
}

type contact_forms_aggregated_fields {
  id: Float
  sort: Float
}

type contact_forms_mutated {
  key: ID!
  event: EventEnum
  data: contact_forms
}

type count_functions {
  count: Int
}

type datetime_functions {
  year: Int
  month: Int
  week: Int
  day: Int
  weekday: Int
  hour: Int
  minute: Int
  second: Int
}

type delete_many {
  ids: [ID]!
}

type delete_one {
  id: ID!
}

type directus_activity {
  id: ID!
  action: String!
  user(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  timestamp: Date
  timestamp_func: datetime_functions
  ip: String
  user_agent: String
  collection: String!
  item: String!
  comment: String
  origin: String
  revisions(filter: directus_revisions_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_revisions]
  revisions_func: count_functions
}

type directus_activity_mutated {
  key: ID!
  event: EventEnum
  data: directus_activity
}

type directus_dashboards {
  id: ID!
  name: String!
  icon: String
  note: String
  date_created: Date
  date_created_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  color: String
  panels(filter: directus_panels_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_panels]
  panels_func: count_functions
}

type directus_dashboards_mutated {
  key: ID!
  event: EventEnum
  data: directus_dashboards
}

type directus_files {
  id: ID!
  storage: String!
  filename_disk: String
  filename_download: String!
  title: String
  type: String
  folder(filter: directus_folders_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_folders
  uploaded_by(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  uploaded_on: Date
  uploaded_on_func: datetime_functions
  modified_by(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  modified_on: Date
  modified_on_func: datetime_functions
  charset: String
  filesize: GraphQLBigInt
  width: Int
  height: Int
  duration: Int
  embed: String
  description: String
  location: String
  tags: JSON
  tags_func: count_functions
  metadata: JSON
  metadata_func: count_functions
  focal_point_x: Int
  focal_point_y: Int
  tus_id: String
  tus_data: JSON
  tus_data_func: count_functions
  thumbhash: String
}

type directus_files_mutated {
  key: ID!
  event: EventEnum
  data: directus_files
}

type directus_flows {
  id: ID!
  name: String!
  icon: String
  color: String
  description: String
  status: String
  trigger: String
  accountability: String
  options: JSON
  options_func: count_functions
  operation(filter: directus_operations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_operations
  date_created: Date
  date_created_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  flow_manager_category: String
  flow_manager_order: Int
  flow_manager_last_run_at: Date
  flow_manager_last_run_at_func: datetime_functions
  flow_manager_run_counter: Int
  operations(filter: directus_operations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_operations]
  operations_func: count_functions
}

type directus_flows_mutated {
  key: ID!
  event: EventEnum
  data: directus_flows
}

type directus_folders {
  id: ID!
  name: String!
  parent(filter: directus_folders_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_folders
}

type directus_folders_mutated {
  key: ID!
  event: EventEnum
  data: directus_folders
}

type directus_notifications {
  id: ID!
  timestamp: Date
  timestamp_func: datetime_functions
  status: String
  recipient(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  sender(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  subject: String!
  message: String
  collection: String
  item: String
}

type directus_notifications_mutated {
  key: ID!
  event: EventEnum
  data: directus_notifications
}

type directus_operations {
  id: ID!
  name: String
  key: String!
  type: String!
  position_x: Int!
  position_y: Int!
  options: JSON
  options_func: count_functions
  resolve(filter: directus_operations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_operations
  reject(filter: directus_operations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_operations
  flow(filter: directus_flows_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_flows
  date_created: Date
  date_created_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
}

type directus_operations_mutated {
  key: ID!
  event: EventEnum
  data: directus_operations
}

type directus_panels {
  id: ID!
  dashboard(filter: directus_dashboards_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_dashboards
  name: String
  icon: String
  color: String
  show_header: Boolean!
  note: String
  type: String!
  position_x: Int!
  position_y: Int!
  width: Int!
  height: Int!
  options: JSON
  options_func: count_functions
  date_created: Date
  date_created_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
}

type directus_panels_mutated {
  key: ID!
  event: EventEnum
  data: directus_panels
}

type directus_permissions {
  id: ID
  role(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles
  collection: String!
  action: String!
  permissions: JSON
  permissions_func: count_functions
  validation: JSON
  validation_func: count_functions
  presets: JSON
  presets_func: count_functions
  fields: [String]
}

type directus_permissions_mutated {
  key: ID!
  event: EventEnum
  data: directus_permissions
}

type directus_presets {
  id: ID!
  bookmark: String
  user(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  role(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles
  collection: String
  search: String
  layout: String
  layout_query: JSON
  layout_query_func: count_functions
  layout_options: JSON
  layout_options_func: count_functions
  refresh_interval: Int
  filter: JSON
  filter_func: count_functions
  icon: String
  color: String
}

type directus_presets_mutated {
  key: ID!
  event: EventEnum
  data: directus_presets
}

type directus_revisions {
  id: ID!
  activity(filter: directus_activity_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_activity
  collection: String!
  item: String!
  data: JSON
  data_func: count_functions
  delta: JSON
  delta_func: count_functions
  parent(filter: directus_revisions_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_revisions
  version(filter: directus_versions_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_versions
}

type directus_revisions_mutated {
  key: ID!
  event: EventEnum
  data: directus_revisions
}

type directus_roles {
  id: ID!
  name: String!
  icon: String
  description: String
  ip_access: [String]
  enforce_tfa: Boolean!
  admin_access: Boolean!
  app_access: Boolean
  users(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_users]
  users_func: count_functions
}

type directus_roles_mutated {
  key: ID!
  event: EventEnum
  data: directus_roles
}

type directus_settings {
  id: ID!
  project_name: String
  project_url: String

  """$t:field_options.directus_settings.project_color_note"""
  project_color: String
  project_logo(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  public_foreground(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  public_background(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  public_note: String
  auth_login_attempts: Int
  auth_password_policy: String
  storage_asset_transform: String
  storage_asset_presets: JSON
  storage_asset_presets_func: count_functions
  custom_css: String
  storage_default_folder(filter: directus_folders_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_folders
  basemaps: JSON
  basemaps_func: count_functions
  mapbox_key: String
  module_bar: JSON
  module_bar_func: count_functions
  project_descriptor: String
  default_language: String
  custom_aspect_ratios: JSON
  custom_aspect_ratios_func: count_functions
  public_favicon(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  default_appearance: String
  default_theme_light: String
  theme_light_overrides: JSON
  theme_light_overrides_func: count_functions
  default_theme_dark: String
  theme_dark_overrides: JSON
  theme_dark_overrides_func: count_functions
  report_error_url: String
  report_bug_url: String
  report_feature_url: String

  """$t:fields.directus_settings.public_registration_note"""
  public_registration: Boolean!

  """$t:fields.directus_settings.public_registration_verify_email_note"""
  public_registration_verify_email: Boolean
  public_registration_role(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles

  """$t:fields.directus_settings.public_registration_email_filter_note"""
  public_registration_email_filter: JSON
  public_registration_email_filter_func: count_functions
  flow_manager_categories: JSON
  flow_manager_categories_func: count_functions
}

type directus_settings_mutated {
  key: ID!
  event: EventEnum
  data: directus_settings
}

type directus_shares {
  id: ID!
  name: String
  collection: String!
  item: String!
  role(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles

  """$t:shared_leave_blank_for_passwordless_access"""
  password: Hash
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions

  """$t:shared_leave_blank_for_unlimited"""
  date_start: Date
  date_start_func: datetime_functions

  """$t:shared_leave_blank_for_unlimited"""
  date_end: Date
  date_end_func: datetime_functions
  times_used: Int

  """$t:shared_leave_blank_for_unlimited"""
  max_uses: Int
}

type directus_shares_mutated {
  key: ID!
  event: EventEnum
  data: directus_shares
}

type directus_sync_id_map {
  id: ID!
  table: String!
  sync_id: String!
  local_id: String!
  created_at: Date
  created_at_func: datetime_functions
}

type directus_sync_id_map_aggregated {
  group: JSON
  countAll: Int
  count: directus_sync_id_map_aggregated_count
  countDistinct: directus_sync_id_map_aggregated_count
  avg: directus_sync_id_map_aggregated_fields
  sum: directus_sync_id_map_aggregated_fields
  avgDistinct: directus_sync_id_map_aggregated_fields
  sumDistinct: directus_sync_id_map_aggregated_fields
  min: directus_sync_id_map_aggregated_fields
  max: directus_sync_id_map_aggregated_fields
}

type directus_sync_id_map_aggregated_count {
  id: Int
  table: Int
  sync_id: Int
  local_id: Int
  created_at: Int
}

type directus_sync_id_map_aggregated_fields {
  id: Float
}

type directus_sync_id_map_mutated {
  key: ID!
  event: EventEnum
  data: directus_sync_id_map
}

type directus_translations {
  id: ID!
  language: String!
  key: String!
  value: String!
}

type directus_translations_mutated {
  key: ID!
  event: EventEnum
  data: directus_translations
}

type directus_users {
  id: ID!
  first_name: String
  last_name: String
  email: String
  password: Hash
  location: String
  title: String
  description: String
  tags: JSON
  tags_func: count_functions
  avatar(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  language: String
  tfa_secret: Hash
  status: String
  role(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles
  token: Hash
  last_access: Date
  last_access_func: datetime_functions
  last_page: String
  provider: String
  external_identifier: String
  auth_data: JSON
  auth_data_func: count_functions
  email_notifications: Boolean
  appearance: String
  theme_dark: String
  theme_light: String
  theme_light_overrides: JSON
  theme_light_overrides_func: count_functions
  theme_dark_overrides: JSON
  theme_dark_overrides_func: count_functions
}

type directus_users_mutated {
  key: ID!
  event: EventEnum
  data: directus_users
}

type directus_versions {
  id: ID!
  key: String!
  name: String
  collection: String!
  item: String!
  hash: String
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
}

type directus_versions_mutated {
  key: ID!
  event: EventEnum
  data: directus_versions
}

type directus_webhooks {
  id: ID!
  name: String!
  method: String
  url: String!
  status: String
  data: Boolean
  actions: [String]!
  collections: [String]!
  headers: JSON
  headers_func: count_functions
  was_active_before_deprecation: Boolean!
  migrated_flow(filter: directus_flows_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_flows
}

type directus_webhooks_mutated {
  key: ID!
  event: EventEnum
  data: directus_webhooks
}

type gallery {
  id: ID!
  type: String
  images(filter: gallery_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [gallery_files]
  images_func: count_functions
}

type gallery_aggregated {
  group: JSON
  countAll: Int
  count: gallery_aggregated_count
  countDistinct: gallery_aggregated_count
}

type gallery_aggregated_count {
  id: Int
  type: Int

  """Please only select image files (jpg, png, etc.)"""
  images: Int
}

type gallery_files {
  id: ID!
  gallery_id(filter: gallery_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): gallery
  directus_files_id(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
}

type gallery_files_aggregated {
  group: JSON
  countAll: Int
  count: gallery_files_aggregated_count
  countDistinct: gallery_files_aggregated_count
  avg: gallery_files_aggregated_fields
  sum: gallery_files_aggregated_fields
  avgDistinct: gallery_files_aggregated_fields
  sumDistinct: gallery_files_aggregated_fields
  min: gallery_files_aggregated_fields
  max: gallery_files_aggregated_fields
}

type gallery_files_aggregated_count {
  id: Int
  gallery_id: Int
  directus_files_id: Int
}

type gallery_files_aggregated_fields {
  id: Float
}

type gallery_files_mutated {
  key: ID!
  event: EventEnum
  data: gallery_files
}

type gallery_mutated {
  key: ID!
  event: EventEnum
  data: gallery
}

type homepage {
  id: ID!
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  img(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
}

type homepage_mutated {
  key: ID!
  event: EventEnum
  data: homepage
}

type image {
  id: ID!
  sort: Int
  image(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  show_caption: Boolean
}

type image_aggregated {
  group: JSON
  countAll: Int
  count: image_aggregated_count
  countDistinct: image_aggregated_count
  avg: image_aggregated_fields
  sum: image_aggregated_fields
  avgDistinct: image_aggregated_fields
  sumDistinct: image_aggregated_fields
  min: image_aggregated_fields
  max: image_aggregated_fields
}

type image_aggregated_count {
  id: Int
  sort: Int
  image: Int
  show_caption: Int
}

type image_aggregated_fields {
  sort: Float
}

type image_mutated {
  key: ID!
  event: EventEnum
  data: image
}

type menu_items {
  id: ID!
  menu(filter: menus_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): menus
  sort: Int
  label: String
  type: String
  url: String
  open_in_new_tab: Boolean
  page(filter: pages_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): pages
  parent(filter: menu_items_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): menu_items
  children(filter: menu_items_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [menu_items]
  children_func: count_functions
}

type menu_items_aggregated {
  group: JSON
  countAll: Int
  count: menu_items_aggregated_count
  countDistinct: menu_items_aggregated_count
  avg: menu_items_aggregated_fields
  sum: menu_items_aggregated_fields
  avgDistinct: menu_items_aggregated_fields
  sumDistinct: menu_items_aggregated_fields
  min: menu_items_aggregated_fields
  max: menu_items_aggregated_fields
}

type menu_items_aggregated_count {
  id: Int
  menu: Int
  sort: Int
  label: Int
  type: Int
  url: Int
  open_in_new_tab: Int
  page: Int
  parent: Int
  children: Int
}

type menu_items_aggregated_fields {
  sort: Float
}

type menu_items_mutated {
  key: ID!
  event: EventEnum
  data: menu_items
}

type menus {
  title: ID!
  sort: Int
  items(filter: menu_items_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [menu_items]
  items_func: count_functions
}

type menus_aggregated {
  group: JSON
  countAll: Int
  count: menus_aggregated_count
  countDistinct: menus_aggregated_count
  avg: menus_aggregated_fields
  sum: menus_aggregated_fields
  avgDistinct: menus_aggregated_fields
  sumDistinct: menus_aggregated_fields
  min: menus_aggregated_fields
  max: menus_aggregated_fields
}

type menus_aggregated_count {
  title: Int
  sort: Int
  items: Int
}

type menus_aggregated_fields {
  sort: Float
}

type menus_mutated {
  key: ID!
  event: EventEnum
  data: menus
}

type pages {
  id: ID!
  status: String
  sort: Int
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  title: String!
  parent(filter: pages_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): pages
  permalink: String
  editor: JSON
  editor_func: count_functions
  seo_detail(filter: seo_detail_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): seo_detail
  editor_nodes(filter: pages_editor_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [pages_editor_nodes]
  editor_nodes_func: count_functions
}

type pages_aggregated {
  group: JSON
  countAll: Int
  count: pages_aggregated_count
  countDistinct: pages_aggregated_count
  avg: pages_aggregated_fields
  sum: pages_aggregated_fields
  avgDistinct: pages_aggregated_fields
  sumDistinct: pages_aggregated_fields
  min: pages_aggregated_fields
  max: pages_aggregated_fields
}

type pages_aggregated_count {
  id: Int
  status: Int
  sort: Int
  user_created: Int
  date_created: Int
  user_updated: Int
  date_updated: Int
  title: Int
  parent: Int
  permalink: Int
  editor: Int
  seo_detail: Int
  editor_nodes: Int
}

type pages_aggregated_fields {
  sort: Float
  seo_detail: Float
}

type pages_editor_nodes {
  id: ID!
  pages_id(filter: pages_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): pages
  item: pages_editor_nodes_item_union
  collection: String
}

type pages_editor_nodes_aggregated {
  group: JSON
  countAll: Int
  count: pages_editor_nodes_aggregated_count
  countDistinct: pages_editor_nodes_aggregated_count
}

type pages_editor_nodes_aggregated_count {
  id: Int
  pages_id: Int
  item: Int
  collection: Int
}

type pages_editor_nodes_mutated {
  key: ID!
  event: EventEnum
  data: pages_editor_nodes
}

type pages_mutated {
  key: ID!
  event: EventEnum
  data: pages
}

type quote {
  id: ID!
  text: String
  author: String
}

type quote_aggregated {
  group: JSON
  countAll: Int
  count: quote_aggregated_count
  countDistinct: quote_aggregated_count
}

type quote_aggregated_count {
  id: Int
  text: Int
  author: Int
}

type quote_mutated {
  key: ID!
  event: EventEnum
  data: quote
}

type section {
  id: ID!
  editor: JSON
  editor_func: count_functions
  width: String
  color: String
  editor_nodes(filter: section_editor_nodes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [section_editor_nodes]
  editor_nodes_func: count_functions
}

type section_aggregated {
  group: JSON
  countAll: Int
  count: section_aggregated_count
  countDistinct: section_aggregated_count
}

type section_aggregated_count {
  id: Int
  editor: Int
  width: Int
  color: Int
  editor_nodes: Int
}

type section_editor_nodes {
  id: ID!
  section_id(filter: section_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): section
  item: section_editor_nodes_item_union
  collection: String
}

type section_editor_nodes_aggregated {
  group: JSON
  countAll: Int
  count: section_editor_nodes_aggregated_count
  countDistinct: section_editor_nodes_aggregated_count
}

type section_editor_nodes_aggregated_count {
  id: Int
  section_id: Int
  item: Int
  collection: Int
}

type section_editor_nodes_mutated {
  key: ID!
  event: EventEnum
  data: section_editor_nodes
}

type section_mutated {
  key: ID!
  event: EventEnum
  data: section
}

type seo_advanced_setting {
  collection: ID!
  enabled: Boolean
  is_static: Boolean
  translations: String
  translations_func: count_functions
}

type seo_advanced_setting_aggregated {
  group: JSON
  countAll: Int
  count: seo_advanced_setting_aggregated_count
  countDistinct: seo_advanced_setting_aggregated_count
}

type seo_advanced_setting_aggregated_count {
  collection: Int
  enabled: Int
  is_static: Int
  translations: Int
}

type seo_advanced_setting_mutated {
  key: ID!
  event: EventEnum
  data: seo_advanced_setting
}

type seo_detail {
  id: ID!
  meta_title: String
  meta_description: String
  meta_keywords: String
  schema_type: String
  meta_robots: JSON
  meta_robots_func: count_functions
  meta_social: String
  image_share: String
  facebook_image: String
  twitter_image: String
}

type seo_detail_aggregated {
  group: JSON
  countAll: Int
  count: seo_detail_aggregated_count
  countDistinct: seo_detail_aggregated_count
  avg: seo_detail_aggregated_fields
  sum: seo_detail_aggregated_fields
  avgDistinct: seo_detail_aggregated_fields
  sumDistinct: seo_detail_aggregated_fields
  min: seo_detail_aggregated_fields
  max: seo_detail_aggregated_fields
}

type seo_detail_aggregated_count {
  id: Int
  meta_title: Int
  meta_description: Int
  meta_keywords: Int
  schema_type: Int
  meta_robots: Int
  meta_social: Int
  image_share: Int
  facebook_image: Int
  twitter_image: Int
}

type seo_detail_aggregated_fields {
  id: Float
}

type seo_detail_mutated {
  key: ID!
  event: EventEnum
  data: seo_detail
}

type seo_redirection {
  id: ID!
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  status: String
  old_url: String
  new_url: String
}

type seo_redirection_aggregated {
  group: JSON
  countAll: Int
  count: seo_redirection_aggregated_count
  countDistinct: seo_redirection_aggregated_count
  avg: seo_redirection_aggregated_fields
  sum: seo_redirection_aggregated_fields
  avgDistinct: seo_redirection_aggregated_fields
  sumDistinct: seo_redirection_aggregated_fields
  min: seo_redirection_aggregated_fields
  max: seo_redirection_aggregated_fields
}

type seo_redirection_aggregated_count {
  id: Int
  date_created: Int
  date_updated: Int
  status: Int
  old_url: Int
  new_url: Int
}

type seo_redirection_aggregated_fields {
  id: Float
}

type seo_redirection_mutated {
  key: ID!
  event: EventEnum
  data: seo_redirection
}

type seo_setting {
  key: ID!
  value: JSON
  value_func: count_functions
}

type seo_setting_aggregated {
  group: JSON
  countAll: Int
  count: seo_setting_aggregated_count
  countDistinct: seo_setting_aggregated_count
}

type seo_setting_aggregated_count {
  key: Int
  value: Int
}

type seo_setting_mutated {
  key: ID!
  event: EventEnum
  data: seo_setting
}

""""""
type version_button {
  id: ID
  label: String
  size: String
  variant: String
  type: String
  url: String
  page: JSON
  new_tab: Boolean
}

""""""
type version_contact_forms {
  id: ID
  sort: Int
  date_created: Date
  name: String
  email: String
  message: String
}

""""""
type version_directus_sync_id_map {
  id: ID
  table: String
  sync_id: String
  local_id: String
  created_at: Date
}

""""""
type version_gallery {
  id: ID
  type: String
  images: JSON
}

""""""
type version_gallery_files {
  id: ID
  gallery_id: JSON
  directus_files_id: JSON
}

""""""
type version_homepage {
  id: ID
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  img: JSON
}

""""""
type version_image {
  id: ID
  sort: Int
  image: JSON
  show_caption: Boolean
}

""""""
type version_menu_items {
  id: ID
  menu: JSON
  sort: Int
  label: String
  type: String
  url: String
  open_in_new_tab: Boolean
  page: JSON
  parent: JSON
  children: JSON
}

""""""
type version_menus {
  title: ID
  sort: Int
  items: JSON
}

""""""
type version_pages {
  id: ID
  status: String
  sort: Int
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  title: String
  parent: JSON
  permalink: String
  editor: JSON
  seo_detail: JSON
  editor_nodes: JSON
}

""""""
type version_pages_editor_nodes {
  id: ID
  pages_id: JSON
  item: String
  collection: String
}

""""""
type version_quote {
  id: ID
  text: String
  author: String
}

""""""
type version_section {
  id: ID
  editor: JSON
  width: String
  color: String
  editor_nodes: JSON
}

""""""
type version_section_editor_nodes {
  id: ID
  section_id: JSON
  item: String
  collection: String
}

""""""
type version_seo_advanced_setting {
  collection: ID
  enabled: Boolean
  is_static: Boolean
  translations: String
}

""""""
type version_seo_detail {
  id: ID
  meta_title: String
  meta_description: String
  meta_keywords: String
  schema_type: String
  meta_robots: JSON
  meta_social: String
  image_share: String
  facebook_image: String
  twitter_image: String
}

""""""
type version_seo_redirection {
  id: ID
  date_created: Date
  date_updated: Date
  status: String
  old_url: String
  new_url: String
}

""""""
type version_seo_setting {
  key: ID
  value: JSON
}

input big_int_filter_operators {
  _eq: GraphQLBigInt
  _neq: GraphQLBigInt
  _in: [GraphQLBigInt]
  _nin: [GraphQLBigInt]
  _gt: GraphQLBigInt
  _gte: GraphQLBigInt
  _lt: GraphQLBigInt
  _lte: GraphQLBigInt
  _null: Boolean
  _nnull: Boolean
  _between: [GraphQLBigInt]
  _nbetween: [GraphQLBigInt]
}

input boolean_filter_operators {
  _eq: Boolean
  _neq: Boolean
  _null: Boolean
  _nnull: Boolean
}

input button_filter {
  id: string_filter_operators
  label: string_filter_operators
  size: string_filter_operators
  variant: string_filter_operators
  type: string_filter_operators
  url: string_filter_operators
  page: pages_filter
  new_tab: boolean_filter_operators
  _and: [button_filter]
  _or: [button_filter]
}

input contact_forms_filter {
  id: big_int_filter_operators
  sort: number_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  name: string_filter_operators
  email: string_filter_operators
  message: string_filter_operators
  _and: [contact_forms_filter]
  _or: [contact_forms_filter]
}

input count_function_filter_operators {
  count: number_filter_operators
}

input create_button_input {
  id: ID
  label: String!
  size: String
  variant: String
  type: String
  url: String
  page: create_pages_input
  new_tab: Boolean
}

input create_contact_forms_input {
  id: ID
  sort: Int
  date_created: Date
  name: String
  email: String
  message: String
}

input create_directus_files_input {
  id: ID
  storage: String!
  filename_disk: String
  filename_download: String!
  title: String
  type: String
  folder: create_directus_folders_input
  uploaded_by: create_directus_users_input
  uploaded_on: Date
  modified_by: create_directus_users_input
  modified_on: Date
  charset: String
  filesize: GraphQLBigInt
  width: Int
  height: Int
  duration: Int
  embed: String
  description: String
  location: String
  tags: JSON
  metadata: JSON
  focal_point_x: Int
  focal_point_y: Int
  tus_id: String
  tus_data: JSON
  thumbhash: String
}

input create_directus_folders_input {
  id: ID
  name: String!
  parent: create_directus_folders_input
}

input create_directus_roles_input {
  id: ID
  name: String!
  icon: String
  description: String
  ip_access: [String]
  enforce_tfa: Boolean!
  admin_access: Boolean!
  app_access: Boolean
  users: [create_directus_users_input]
}

input create_directus_sync_id_map_input {
  id: ID
  table: String!
  sync_id: String!
  local_id: String!
  created_at: Date
}

input create_directus_users_input {
  id: ID
  first_name: String
  last_name: String
  email: String
  password: Hash
  location: String
  title: String
  description: String
  tags: JSON
  avatar: create_directus_files_input
  language: String
  tfa_secret: Hash
  status: String
  role: create_directus_roles_input
  token: Hash
  last_access: Date
  last_page: String
  provider: String
  external_identifier: String
  auth_data: JSON
  email_notifications: Boolean
  appearance: String
  theme_dark: String
  theme_light: String
  theme_light_overrides: JSON
  theme_dark_overrides: JSON
}

input create_gallery_files_input {
  id: ID
  gallery_id: create_gallery_input
  directus_files_id: create_directus_files_input
}

input create_gallery_input {
  id: ID
  type: String
  images: [create_gallery_files_input]
}

input create_image_input {
  id: ID
  sort: Int
  image: create_directus_files_input
  show_caption: Boolean
}

input create_menu_items_input {
  id: ID
  menu: create_menus_input
  sort: Int
  label: String
  type: String
  url: String
  open_in_new_tab: Boolean
  page: create_pages_input
  parent: create_menu_items_input
  children: [create_menu_items_input]
}

input create_menus_input {
  title: ID!
  sort: Int
  items: [create_menu_items_input]
}

input create_pages_editor_nodes_input {
  id: ID
  pages_id: create_pages_input
  item: String
  collection: String
}

input create_pages_input {
  id: ID
  status: String
  sort: Int
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  title: String!
  parent: create_pages_input
  permalink: String
  editor: JSON
  seo_detail: create_seo_detail_input
  editor_nodes: [create_pages_editor_nodes_input]
}

input create_quote_input {
  id: ID
  text: String
  author: String
}

input create_section_editor_nodes_input {
  id: ID
  section_id: create_section_input
  item: String
  collection: String
}

input create_section_input {
  id: ID
  editor: JSON
  width: String
  color: String
  editor_nodes: [create_section_editor_nodes_input]
}

input create_seo_advanced_setting_input {
  collection: ID!
  enabled: Boolean
  is_static: Boolean
  translations: String
}

input create_seo_detail_input {
  id: ID
  meta_title: String
  meta_description: String
  meta_keywords: String
  schema_type: String
  meta_robots: JSON
  meta_social: String
  image_share: String
  facebook_image: String
  twitter_image: String
}

input create_seo_redirection_input {
  id: ID
  date_created: Date
  date_updated: Date
  status: String
  old_url: String
  new_url: String
}

input create_seo_setting_input {
  key: ID!
  value: JSON
}

input date_filter_operators {
  _eq: String
  _neq: String
  _gt: String
  _gte: String
  _lt: String
  _lte: String
  _null: Boolean
  _nnull: Boolean
  _in: [String]
  _nin: [String]
  _between: [GraphQLStringOrFloat]
  _nbetween: [GraphQLStringOrFloat]
}

input datetime_function_filter_operators {
  year: number_filter_operators
  month: number_filter_operators
  week: number_filter_operators
  day: number_filter_operators
  weekday: number_filter_operators
  hour: number_filter_operators
  minute: number_filter_operators
  second: number_filter_operators
}

input directus_activity_filter {
  id: number_filter_operators
  action: string_filter_operators
  user: directus_users_filter
  timestamp: date_filter_operators
  timestamp_func: datetime_function_filter_operators
  ip: string_filter_operators
  user_agent: string_filter_operators
  collection: string_filter_operators
  item: string_filter_operators
  comment: string_filter_operators
  origin: string_filter_operators
  revisions: directus_revisions_filter
  revisions_func: count_function_filter_operators
  _and: [directus_activity_filter]
  _or: [directus_activity_filter]
}

input directus_dashboards_filter {
  id: string_filter_operators
  name: string_filter_operators
  icon: string_filter_operators
  note: string_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_created: directus_users_filter
  color: string_filter_operators
  panels: directus_panels_filter
  panels_func: count_function_filter_operators
  _and: [directus_dashboards_filter]
  _or: [directus_dashboards_filter]
}

input directus_files_filter {
  id: string_filter_operators
  storage: string_filter_operators
  filename_disk: string_filter_operators
  filename_download: string_filter_operators
  title: string_filter_operators
  type: string_filter_operators
  folder: directus_folders_filter
  uploaded_by: directus_users_filter
  uploaded_on: date_filter_operators
  uploaded_on_func: datetime_function_filter_operators
  modified_by: directus_users_filter
  modified_on: date_filter_operators
  modified_on_func: datetime_function_filter_operators
  charset: string_filter_operators
  filesize: big_int_filter_operators
  width: number_filter_operators
  height: number_filter_operators
  duration: number_filter_operators
  embed: string_filter_operators
  description: string_filter_operators
  location: string_filter_operators
  tags: string_filter_operators
  tags_func: count_function_filter_operators
  metadata: string_filter_operators
  metadata_func: count_function_filter_operators
  focal_point_x: number_filter_operators
  focal_point_y: number_filter_operators
  tus_id: string_filter_operators
  tus_data: string_filter_operators
  tus_data_func: count_function_filter_operators
  thumbhash: string_filter_operators
  _and: [directus_files_filter]
  _or: [directus_files_filter]
}

input directus_flows_filter {
  id: string_filter_operators
  name: string_filter_operators
  icon: string_filter_operators
  color: string_filter_operators
  description: string_filter_operators
  status: string_filter_operators
  trigger: string_filter_operators
  accountability: string_filter_operators
  options: string_filter_operators
  options_func: count_function_filter_operators
  operation: directus_operations_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_created: directus_users_filter
  flow_manager_category: string_filter_operators
  flow_manager_order: number_filter_operators
  flow_manager_last_run_at: date_filter_operators
  flow_manager_last_run_at_func: datetime_function_filter_operators
  flow_manager_run_counter: number_filter_operators
  operations: directus_operations_filter
  operations_func: count_function_filter_operators
  _and: [directus_flows_filter]
  _or: [directus_flows_filter]
}

input directus_folders_filter {
  id: string_filter_operators
  name: string_filter_operators
  parent: directus_folders_filter
  _and: [directus_folders_filter]
  _or: [directus_folders_filter]
}

input directus_operations_filter {
  id: string_filter_operators
  name: string_filter_operators
  key: string_filter_operators
  type: string_filter_operators
  position_x: number_filter_operators
  position_y: number_filter_operators
  options: string_filter_operators
  options_func: count_function_filter_operators
  resolve: directus_operations_filter
  reject: directus_operations_filter
  flow: directus_flows_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_created: directus_users_filter
  _and: [directus_operations_filter]
  _or: [directus_operations_filter]
}

input directus_panels_filter {
  id: string_filter_operators
  dashboard: directus_dashboards_filter
  name: string_filter_operators
  icon: string_filter_operators
  color: string_filter_operators
  show_header: boolean_filter_operators
  note: string_filter_operators
  type: string_filter_operators
  position_x: number_filter_operators
  position_y: number_filter_operators
  width: number_filter_operators
  height: number_filter_operators
  options: string_filter_operators
  options_func: count_function_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_created: directus_users_filter
  _and: [directus_panels_filter]
  _or: [directus_panels_filter]
}

input directus_revisions_filter {
  id: number_filter_operators
  activity: directus_activity_filter
  collection: string_filter_operators
  item: string_filter_operators
  data: string_filter_operators
  data_func: count_function_filter_operators
  delta: string_filter_operators
  delta_func: count_function_filter_operators
  parent: directus_revisions_filter
  version: directus_versions_filter
  _and: [directus_revisions_filter]
  _or: [directus_revisions_filter]
}

input directus_roles_filter {
  id: string_filter_operators
  name: string_filter_operators
  icon: string_filter_operators
  description: string_filter_operators
  ip_access: string_filter_operators
  enforce_tfa: boolean_filter_operators
  admin_access: boolean_filter_operators
  app_access: boolean_filter_operators
  users: directus_users_filter
  users_func: count_function_filter_operators
  _and: [directus_roles_filter]
  _or: [directus_roles_filter]
}

input directus_sync_id_map_filter {
  id: number_filter_operators
  table: string_filter_operators
  sync_id: string_filter_operators
  local_id: string_filter_operators
  created_at: date_filter_operators
  created_at_func: datetime_function_filter_operators
  _and: [directus_sync_id_map_filter]
  _or: [directus_sync_id_map_filter]
}

input directus_users_filter {
  id: string_filter_operators
  first_name: string_filter_operators
  last_name: string_filter_operators
  email: string_filter_operators
  password: hash_filter_operators
  location: string_filter_operators
  title: string_filter_operators
  description: string_filter_operators
  tags: string_filter_operators
  tags_func: count_function_filter_operators
  avatar: directus_files_filter
  language: string_filter_operators
  tfa_secret: hash_filter_operators
  status: string_filter_operators
  role: directus_roles_filter
  token: hash_filter_operators
  last_access: date_filter_operators
  last_access_func: datetime_function_filter_operators
  last_page: string_filter_operators
  provider: string_filter_operators
  external_identifier: string_filter_operators
  auth_data: string_filter_operators
  auth_data_func: count_function_filter_operators
  email_notifications: boolean_filter_operators
  appearance: string_filter_operators
  theme_dark: string_filter_operators
  theme_light: string_filter_operators
  theme_light_overrides: string_filter_operators
  theme_light_overrides_func: count_function_filter_operators
  theme_dark_overrides: string_filter_operators
  theme_dark_overrides_func: count_function_filter_operators
  _and: [directus_users_filter]
  _or: [directus_users_filter]
}

input directus_versions_filter {
  id: string_filter_operators
  key: string_filter_operators
  name: string_filter_operators
  collection: string_filter_operators
  item: string_filter_operators
  hash: string_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  user_created: directus_users_filter
  user_updated: directus_users_filter
  _and: [directus_versions_filter]
  _or: [directus_versions_filter]
}

input gallery_files_filter {
  id: number_filter_operators
  gallery_id: gallery_filter
  directus_files_id: directus_files_filter
  _and: [gallery_files_filter]
  _or: [gallery_files_filter]
}

input gallery_filter {
  id: string_filter_operators
  type: string_filter_operators
  images: gallery_files_filter
  images_func: count_function_filter_operators
  _and: [gallery_filter]
  _or: [gallery_filter]
}

input hash_filter_operators {
  _null: Boolean
  _nnull: Boolean
  _empty: Boolean
  _nempty: Boolean
}

input image_filter {
  id: string_filter_operators
  sort: number_filter_operators
  image: directus_files_filter
  show_caption: boolean_filter_operators
  _and: [image_filter]
  _or: [image_filter]
}

input menu_items_filter {
  id: string_filter_operators
  menu: menus_filter
  sort: number_filter_operators
  label: string_filter_operators
  type: string_filter_operators
  url: string_filter_operators
  open_in_new_tab: boolean_filter_operators
  page: pages_filter
  parent: menu_items_filter
  children: menu_items_filter
  children_func: count_function_filter_operators
  _and: [menu_items_filter]
  _or: [menu_items_filter]
}

input menus_filter {
  title: string_filter_operators
  sort: number_filter_operators
  items: menu_items_filter
  items_func: count_function_filter_operators
  _and: [menus_filter]
  _or: [menus_filter]
}

input number_filter_operators {
  _eq: GraphQLStringOrFloat
  _neq: GraphQLStringOrFloat
  _in: [GraphQLStringOrFloat]
  _nin: [GraphQLStringOrFloat]
  _gt: GraphQLStringOrFloat
  _gte: GraphQLStringOrFloat
  _lt: GraphQLStringOrFloat
  _lte: GraphQLStringOrFloat
  _null: Boolean
  _nnull: Boolean
  _between: [GraphQLStringOrFloat]
  _nbetween: [GraphQLStringOrFloat]
}

input pages_editor_nodes_filter {
  id: string_filter_operators
  pages_id: pages_filter
  collection: string_filter_operators
  _and: [pages_editor_nodes_filter]
  _or: [pages_editor_nodes_filter]
  item__section: section_filter
}

input pages_filter {
  id: string_filter_operators
  status: string_filter_operators
  sort: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  title: string_filter_operators
  parent: pages_filter
  permalink: string_filter_operators
  editor: string_filter_operators
  editor_func: count_function_filter_operators
  seo_detail: seo_detail_filter
  editor_nodes: pages_editor_nodes_filter
  editor_nodes_func: count_function_filter_operators
  _and: [pages_filter]
  _or: [pages_filter]
}

input quote_filter {
  id: string_filter_operators
  text: string_filter_operators
  author: string_filter_operators
  _and: [quote_filter]
  _or: [quote_filter]
}

input section_editor_nodes_filter {
  id: string_filter_operators
  section_id: section_filter
  collection: string_filter_operators
  _and: [section_editor_nodes_filter]
  _or: [section_editor_nodes_filter]
  item__image: image_filter
  item__gallery: gallery_filter
  item__quote: quote_filter
  item__button: button_filter
}

input section_filter {
  id: string_filter_operators
  editor: string_filter_operators
  editor_func: count_function_filter_operators
  width: string_filter_operators
  color: string_filter_operators
  editor_nodes: section_editor_nodes_filter
  editor_nodes_func: count_function_filter_operators
  _and: [section_filter]
  _or: [section_filter]
}

input seo_advanced_setting_filter {
  collection: string_filter_operators
  enabled: boolean_filter_operators
  is_static: boolean_filter_operators
  translations: string_filter_operators
  translations_func: count_function_filter_operators
  _and: [seo_advanced_setting_filter]
  _or: [seo_advanced_setting_filter]
}

input seo_detail_filter {
  id: number_filter_operators
  meta_title: string_filter_operators
  meta_description: string_filter_operators
  meta_keywords: string_filter_operators
  schema_type: string_filter_operators
  meta_robots: string_filter_operators
  meta_robots_func: count_function_filter_operators
  meta_social: string_filter_operators
  image_share: string_filter_operators
  facebook_image: string_filter_operators
  twitter_image: string_filter_operators
  _and: [seo_detail_filter]
  _or: [seo_detail_filter]
}

input seo_redirection_filter {
  id: number_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  status: string_filter_operators
  old_url: string_filter_operators
  new_url: string_filter_operators
  _and: [seo_redirection_filter]
  _or: [seo_redirection_filter]
}

input seo_setting_filter {
  key: string_filter_operators
  value: string_filter_operators
  value_func: count_function_filter_operators
  _and: [seo_setting_filter]
  _or: [seo_setting_filter]
}

input string_filter_operators {
  _eq: String
  _neq: String
  _contains: String
  _icontains: String
  _ncontains: String
  _starts_with: String
  _nstarts_with: String
  _istarts_with: String
  _nistarts_with: String
  _ends_with: String
  _nends_with: String
  _iends_with: String
  _niends_with: String
  _in: [String]
  _nin: [String]
  _null: Boolean
  _nnull: Boolean
  _empty: Boolean
  _nempty: Boolean
}

input update_button_input {
  id: ID
  label: String
  size: String
  variant: String
  type: String
  url: String
  page: update_pages_input
  new_tab: Boolean
}

input update_contact_forms_input {
  id: ID
  sort: Int
  date_created: Date
  name: String
  email: String
  message: String
}

input update_directus_files_input {
  id: ID
  storage: String
  filename_disk: String
  filename_download: String
  title: String
  type: String
  folder: update_directus_folders_input
  uploaded_by: update_directus_users_input
  uploaded_on: Date
  modified_by: update_directus_users_input
  modified_on: Date
  charset: String
  filesize: GraphQLBigInt
  width: Int
  height: Int
  duration: Int
  embed: String
  description: String
  location: String
  tags: JSON
  metadata: JSON
  focal_point_x: Int
  focal_point_y: Int
  tus_id: String
  tus_data: JSON
  thumbhash: String
}

input update_directus_folders_input {
  id: ID
  name: String
  parent: update_directus_folders_input
}

input update_directus_roles_input {
  id: ID
  name: String
  icon: String
  description: String
  ip_access: [String]
  enforce_tfa: Boolean
  admin_access: Boolean
  app_access: Boolean
  users: [update_directus_users_input]
}

input update_directus_sync_id_map_input {
  id: ID
  table: String
  sync_id: String
  local_id: String
  created_at: Date
}

input update_directus_users_input {
  id: ID
  first_name: String
  last_name: String
  email: String
  password: Hash
  location: String
  title: String
  description: String
  tags: JSON
  avatar: update_directus_files_input
  language: String
  tfa_secret: Hash
  status: String
  role: update_directus_roles_input
  token: Hash
  last_access: Date
  last_page: String
  provider: String
  external_identifier: String
  auth_data: JSON
  email_notifications: Boolean
  appearance: String
  theme_dark: String
  theme_light: String
  theme_light_overrides: JSON
  theme_dark_overrides: JSON
}

input update_gallery_files_input {
  id: ID
  gallery_id: update_gallery_input
  directus_files_id: update_directus_files_input
}

input update_gallery_input {
  id: ID
  type: String
  images: [update_gallery_files_input]
}

input update_homepage_input {
  id: ID
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  img: update_directus_files_input
}

input update_image_input {
  id: ID
  sort: Int
  image: update_directus_files_input
  show_caption: Boolean
}

input update_menu_items_input {
  id: ID
  menu: update_menus_input
  sort: Int
  label: String
  type: String
  url: String
  open_in_new_tab: Boolean
  page: update_pages_input
  parent: update_menu_items_input
  children: [update_menu_items_input]
}

input update_menus_input {
  title: ID
  sort: Int
  items: [update_menu_items_input]
}

input update_pages_editor_nodes_input {
  id: ID
  pages_id: update_pages_input
  item: String
  collection: String
}

input update_pages_input {
  id: ID
  status: String
  sort: Int
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  title: String
  parent: update_pages_input
  permalink: String
  editor: JSON
  seo_detail: update_seo_detail_input
  editor_nodes: [update_pages_editor_nodes_input]
}

input update_quote_input {
  id: ID
  text: String
  author: String
}

input update_section_editor_nodes_input {
  id: ID
  section_id: update_section_input
  item: String
  collection: String
}

input update_section_input {
  id: ID
  editor: JSON
  width: String
  color: String
  editor_nodes: [update_section_editor_nodes_input]
}

input update_seo_advanced_setting_input {
  collection: ID
  enabled: Boolean
  is_static: Boolean
  translations: String
}

input update_seo_detail_input {
  id: ID
  meta_title: String
  meta_description: String
  meta_keywords: String
  schema_type: String
  meta_robots: JSON
  meta_social: String
  image_share: String
  facebook_image: String
  twitter_image: String
}

input update_seo_redirection_input {
  id: ID
  date_created: Date
  date_updated: Date
  status: String
  old_url: String
  new_url: String
}

input update_seo_setting_input {
  key: ID
  value: JSON
}